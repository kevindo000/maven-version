/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package taskmanager;


import java.util.*;
import java.util.stream.Collectors;
import java.awt.event.*;
import java.awt.Dimension;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.ListModel;
import javax.swing.event.*;
import oracle.jdbc.OracleTypes;




/**
 *
 * @author Ganondorfjallida
 */
public class TeamLeadersPage extends javax.swing.JFrame {
    
    
    // Define focus of this page: (what type of data this page is loaded for)
    public enum Focus {
        TASK_CATEGORY,
        TASK,
        SUBTASK
    }
    
    // Selection auto control:
    private boolean __code_selection_mode__ = false;
    
    // Member data:
    private boolean __initialised__ = false;
    private TaskCategory _focused_task_category = null;
    private Task _focused_task = null;
    private Subtask _focused_subtask = null;
    private Focus _focus = null;
    
    // Data structures: 
    private TreeMap<String, TaskCategory> _task_category_map = new TreeMap<>();
    private TreeMap<String, WorkLoadGroup> _member_workload_stat_map = new TreeMap<>();
    private WorkLoadGroup _team_workload_stat;
    private java.util.List<AppUser> _user_list = new ArrayList<>();
    
    
    
    
    /**
     * Creates new form TeamLeadersPage
     */
    public TeamLeadersPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        header_pane = new javax.swing.JPanel();
        team_leaders_page_header_buttons_pane = new javax.swing.JPanel();
        to_task_page_button = new javax.swing.JButton();
        header_buttons_seperator = new javax.swing.JSeparator();
        logout_button = new javax.swing.JButton();
        header_team_label = new javax.swing.JLabel();
        team_leaders_page_team_content_pane = new javax.swing.JPanel();
        team_leaders_page_content_lists_pane = new javax.swing.JPanel();
        content_lists_title_pane = new javax.swing.JPanel();
        task_category_list_label = new javax.swing.JLabel();
        task_list_label = new javax.swing.JLabel();
        subtask_list_label = new javax.swing.JLabel();
        team_member_list_label = new javax.swing.JLabel();
        content_lists_body_pane = new javax.swing.JPanel();
        task_category_list_scroll_pane = new javax.swing.JScrollPane();
        task_category_list = new javax.swing.JList<>();
        task_list_scroll_pane = new javax.swing.JScrollPane();
        task_list = new javax.swing.JList<>();
        subtask_list_scroll_pane = new javax.swing.JScrollPane();
        subtask_list = new javax.swing.JList<>();
        team_member_list_scroll_pane = new javax.swing.JScrollPane();
        team_member_list = new javax.swing.JList<>();
        edit_content_pane = new javax.swing.JPanel();
        task_category_edit_separator = new javax.swing.JSeparator();
        task_category_edit_pane = new javax.swing.JPanel();
        task_category_edit_name_pane = new javax.swing.JPanel();
        task_category_edit_name_label = new javax.swing.JLabel();
        task_category_edit_name_text = new javax.swing.JTextField();
        task_category_edit_description_pane = new javax.swing.JPanel();
        task_category_edit_description_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        task_category_edit_description_text = new javax.swing.JTextArea();
        task_category_edit_creation_info_pane = new javax.swing.JPanel();
        task_category_edit_creator_label = new javax.swing.JLabel();
        task_category_edit_creation_date_label = new javax.swing.JLabel();
        task_category_edit_actions_pane = new javax.swing.JPanel();
        task_category_update_button = new javax.swing.JButton();
        task_category_cancel_update_button = new javax.swing.JButton();
        task_category_edit_message = new javax.swing.JLabel();
        task_edit_separator = new javax.swing.JSeparator();
        task_edit_pane = new javax.swing.JPanel();
        task_edit_name_pane = new javax.swing.JPanel();
        task_edit_name_label = new javax.swing.JLabel();
        task_edit_name_text = new javax.swing.JTextField();
        task_edit_priority_label = new javax.swing.JLabel();
        task_edit_priority_options = new javax.swing.JComboBox<>();
        task_edit_priority_colour_pane = new javax.swing.JPanel();
        task_edit_description_pane = new javax.swing.JPanel();
        task_edit_description_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        task_edit_description_text = new javax.swing.JTextArea();
        task_edit_creation_info_pane = new javax.swing.JPanel();
        task_edit_assignment_label = new javax.swing.JLabel();
        task_edit_creator_label = new javax.swing.JLabel();
        task_edit_creation_date_label = new javax.swing.JLabel();
        task_edit_due_info_pane = new javax.swing.JPanel();
        task_edit_due_date_label = new javax.swing.JLabel();
        task_edit_due_date_text = new javax.swing.JTextField();
        task_edit_due_date_format_label = new javax.swing.JLabel();
        task_edit_status_label = new javax.swing.JLabel();
        task_edit_status_options = new javax.swing.JComboBox<>();
        task_edit_recurrence_options = new javax.swing.JComboBox<>();
        task_edit_task_categories_pane = new javax.swing.JPanel();
        task_edit_task_categories_action_options = new javax.swing.JComboBox<>();
        task_edit_task_categories_option_label = new javax.swing.JLabel();
        task_edit_task_categories_options = new javax.swing.JComboBox<>();
        task_edit_actions_pane = new javax.swing.JPanel();
        task_edit_update_button = new javax.swing.JButton();
        task_edit_cancel_update_button = new javax.swing.JButton();
        task_edit_actions_message = new javax.swing.JLabel();
        subtask_edit_separator = new javax.swing.JSeparator();
        subtask_edit_pane = new javax.swing.JPanel();
        subtask_edit_name_pane = new javax.swing.JPanel();
        subtask_edit_name_label = new javax.swing.JLabel();
        subtask_edit_name_text = new javax.swing.JTextField();
        subtask_edit_priority_label = new javax.swing.JLabel();
        subtask_edit_priority_options = new javax.swing.JComboBox<>();
        subtask_edit_priority_colour_pane = new javax.swing.JPanel();
        subtask_edit_description_pane = new javax.swing.JPanel();
        subtask_edit_description_label = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        subtask_edit_description_text = new javax.swing.JTextArea();
        subtask_edit_creation_info_pane = new javax.swing.JPanel();
        subtask_edit_assignment_label = new javax.swing.JLabel();
        subtask_edit_creator_label = new javax.swing.JLabel();
        subtask_edit_creation_date_label = new javax.swing.JLabel();
        subtask_edit_assignment_options = new javax.swing.JComboBox<>();
        subtask_edit_due_info_pane = new javax.swing.JPanel();
        subtask_edit_due_date_label = new javax.swing.JLabel();
        subtask_edit_due_date_text = new javax.swing.JTextField();
        subtask_edit_due_date_format_label = new javax.swing.JLabel();
        subtask_edit_status_label = new javax.swing.JLabel();
        subtask_edit_status_options = new javax.swing.JComboBox<>();
        subtask_edit_parent_task_pane = new javax.swing.JPanel();
        subtask_edit_parent_task_label = new javax.swing.JLabel();
        subtask_edit_parent_task_options = new javax.swing.JComboBox<>();
        subtask_edit_actions_pane = new javax.swing.JPanel();
        subtask_edit_update_button = new javax.swing.JButton();
        subtask_edit_cancel_update_button = new javax.swing.JButton();
        subtask_edit_actions_message = new javax.swing.JLabel();
        productivity_separator = new javax.swing.JSeparator();
        productivity_panel = new javax.swing.JPanel();
        team_productivity_panel = new javax.swing.JPanel();
        team_productivity_title_panel = new javax.swing.JPanel();
        team_productivity_title_label = new javax.swing.JLabel();
        team_productivity_progress_panel = new javax.swing.JPanel();
        team_productivity_progress_completed = new javax.swing.JLabel();
        team_productivity_progress_in_progress = new javax.swing.JLabel();
        team_productivity_progress_not_started = new javax.swing.JLabel();
        team_productivity_completed_panel = new javax.swing.JPanel();
        team_productivity_completed_label = new javax.swing.JLabel();
        team_productivity_completed_colour = new javax.swing.JPanel();
        team_productivity_in_progress_panel = new javax.swing.JPanel();
        team_productivity_in_progress_label = new javax.swing.JLabel();
        team_productivity_in_progress_colour = new javax.swing.JPanel();
        team_productivity_not_started_panel = new javax.swing.JPanel();
        team_productivity_not_started_label = new javax.swing.JLabel();
        team_productivity_not_started_colour = new javax.swing.JPanel();
        team_productivity_workload_panel = new javax.swing.JPanel();
        team_productivity_workload_label = new javax.swing.JLabel();
        team_productivity_workload_value = new javax.swing.JLabel();
        team_productivity_member_count_panel = new javax.swing.JPanel();
        team_productivity_member_count_label = new javax.swing.JLabel();
        team_productivity_member_count_value = new javax.swing.JLabel();
        team_productivity_evalutaion_panel = new javax.swing.JPanel();
        team_productivity_evaluation_label = new javax.swing.JLabel();
        team_productivity_evaluation_value = new javax.swing.JLabel();
        member_productivity_panel = new javax.swing.JPanel();
        member_productivity_title_panel = new javax.swing.JPanel();
        member_productivity_title_label = new javax.swing.JLabel();
        member_productivity_progress_panel = new javax.swing.JPanel();
        member_productivity_progress_completed = new javax.swing.JLabel();
        member_productivity_progress_in_progress = new javax.swing.JLabel();
        member_productivity_progress_not_started = new javax.swing.JLabel();
        member_productivity_completed_panel = new javax.swing.JPanel();
        member_productivity_completed_label = new javax.swing.JLabel();
        member_productivity_completed_colour = new javax.swing.JPanel();
        member_productivity_in_progress_panel = new javax.swing.JPanel();
        member_productivity_in_progress_label = new javax.swing.JLabel();
        member_productivity_in_progress_colour = new javax.swing.JPanel();
        member_productivity_not_started_panel = new javax.swing.JPanel();
        member_productivity_not_started_label = new javax.swing.JLabel();
        member_productivity_not_started_colour = new javax.swing.JPanel();
        member_productivity_evalutaion_panel = new javax.swing.JPanel();
        member_productivity_evaluation_label = new javax.swing.JLabel();
        member_productivity_evaluation_value = new javax.swing.JLabel();
        member_productivity_workload_panel = new javax.swing.JPanel();
        member_productivity_workload_label = new javax.swing.JLabel();
        member_productivity_workload_value = new javax.swing.JLabel();
        member_productivity_username_panel = new javax.swing.JPanel();
        member_productivity_username_label = new javax.swing.JLabel();
        member_productivity_username_value = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        header_pane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        to_task_page_button.setText("Task Page");
        to_task_page_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        to_task_page_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                to_task_page_buttonActionPerformed(evt);
            }
        });

        header_buttons_seperator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        logout_button.setText("Log Out");
        logout_button.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout team_leaders_page_header_buttons_paneLayout = new javax.swing.GroupLayout(team_leaders_page_header_buttons_pane);
        team_leaders_page_header_buttons_pane.setLayout(team_leaders_page_header_buttons_paneLayout);
        team_leaders_page_header_buttons_paneLayout.setHorizontalGroup(
            team_leaders_page_header_buttons_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_leaders_page_header_buttons_paneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(to_task_page_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(header_buttons_seperator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logout_button, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        team_leaders_page_header_buttons_paneLayout.setVerticalGroup(
            team_leaders_page_header_buttons_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header_buttons_seperator)
            .addComponent(to_task_page_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
            .addComponent(logout_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        header_team_label.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        header_team_label.setText("Team Leader's Page");

        javax.swing.GroupLayout header_paneLayout = new javax.swing.GroupLayout(header_pane);
        header_pane.setLayout(header_paneLayout);
        header_paneLayout.setHorizontalGroup(
            header_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, header_paneLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(header_team_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(team_leaders_page_header_buttons_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        header_paneLayout.setVerticalGroup(
            header_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(header_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(header_team_label, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(team_leaders_page_header_buttons_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_leaders_page_team_content_pane.setBorder(javax.swing.BorderFactory.createTitledBorder("Team Content"));
        team_leaders_page_team_content_pane.setLayout(new javax.swing.BoxLayout(team_leaders_page_team_content_pane, javax.swing.BoxLayout.PAGE_AXIS));

        team_leaders_page_content_lists_pane.setPreferredSize(new java.awt.Dimension(814, 150));

        content_lists_title_pane.setLayout(new java.awt.GridLayout(1, 4));

        task_category_list_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task_category_list_label.setText("Task Categories");
        content_lists_title_pane.add(task_category_list_label);

        task_list_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        task_list_label.setText("Tasks");
        content_lists_title_pane.add(task_list_label);

        subtask_list_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtask_list_label.setText("Subtasks");
        content_lists_title_pane.add(subtask_list_label);

        team_member_list_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        team_member_list_label.setText("Team Members");
        content_lists_title_pane.add(team_member_list_label);

        content_lists_body_pane.setLayout(new java.awt.GridLayout(1, 4));

        task_category_list.setModel(new javax.swing.DefaultListModel());
        task_category_list_scroll_pane.setViewportView(task_category_list);

        content_lists_body_pane.add(task_category_list_scroll_pane);

        task_list.setModel(new javax.swing.DefaultListModel());
        task_list_scroll_pane.setViewportView(task_list);

        content_lists_body_pane.add(task_list_scroll_pane);

        subtask_list.setModel(new javax.swing.DefaultListModel());
        subtask_list_scroll_pane.setViewportView(subtask_list);

        content_lists_body_pane.add(subtask_list_scroll_pane);

        team_member_list.setModel(new javax.swing.DefaultListModel());
        team_member_list_scroll_pane.setViewportView(team_member_list);

        content_lists_body_pane.add(team_member_list_scroll_pane);

        javax.swing.GroupLayout team_leaders_page_content_lists_paneLayout = new javax.swing.GroupLayout(team_leaders_page_content_lists_pane);
        team_leaders_page_content_lists_pane.setLayout(team_leaders_page_content_lists_paneLayout);
        team_leaders_page_content_lists_paneLayout.setHorizontalGroup(
            team_leaders_page_content_lists_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, team_leaders_page_content_lists_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(team_leaders_page_content_lists_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(content_lists_body_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                    .addComponent(content_lists_title_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        team_leaders_page_content_lists_paneLayout.setVerticalGroup(
            team_leaders_page_content_lists_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_leaders_page_content_lists_paneLayout.createSequentialGroup()
                .addComponent(content_lists_title_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(content_lists_body_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
        );

        team_leaders_page_team_content_pane.add(team_leaders_page_content_lists_pane);

        task_category_edit_name_label.setText("Category Name:");

        javax.swing.GroupLayout task_category_edit_name_paneLayout = new javax.swing.GroupLayout(task_category_edit_name_pane);
        task_category_edit_name_pane.setLayout(task_category_edit_name_paneLayout);
        task_category_edit_name_paneLayout.setHorizontalGroup(
            task_category_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_name_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_name_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_category_edit_name_text, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        task_category_edit_name_paneLayout.setVerticalGroup(
            task_category_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_category_edit_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_category_edit_name_text)
        );

        task_category_edit_description_label.setText("Description:");

        task_category_edit_description_text.setColumns(20);
        task_category_edit_description_text.setRows(5);
        jScrollPane1.setViewportView(task_category_edit_description_text);

        javax.swing.GroupLayout task_category_edit_description_paneLayout = new javax.swing.GroupLayout(task_category_edit_description_pane);
        task_category_edit_description_pane.setLayout(task_category_edit_description_paneLayout);
        task_category_edit_description_paneLayout.setHorizontalGroup(
            task_category_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_description_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_description_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        task_category_edit_description_paneLayout.setVerticalGroup(
            task_category_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_description_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_description_label)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );

        task_category_edit_creator_label.setText("Created by: Manager");

        task_category_edit_creation_date_label.setText("on: Date");

        javax.swing.GroupLayout task_category_edit_creation_info_paneLayout = new javax.swing.GroupLayout(task_category_edit_creation_info_pane);
        task_category_edit_creation_info_pane.setLayout(task_category_edit_creation_info_paneLayout);
        task_category_edit_creation_info_paneLayout.setHorizontalGroup(
            task_category_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_creation_info_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_creator_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_category_edit_creation_date_label)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        task_category_edit_creation_info_paneLayout.setVerticalGroup(
            task_category_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_category_edit_creator_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_category_edit_creation_date_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        task_category_update_button.setText("Update");
        task_category_update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                task_category_update_buttonActionPerformed(evt);
            }
        });

        task_category_cancel_update_button.setText("Cancel");

        task_category_edit_message.setText("Message");

        javax.swing.GroupLayout task_category_edit_actions_paneLayout = new javax.swing.GroupLayout(task_category_edit_actions_pane);
        task_category_edit_actions_pane.setLayout(task_category_edit_actions_paneLayout);
        task_category_edit_actions_paneLayout.setHorizontalGroup(
            task_category_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_actions_paneLayout.createSequentialGroup()
                .addComponent(task_category_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_category_cancel_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_category_edit_message, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        task_category_edit_actions_paneLayout.setVerticalGroup(
            task_category_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_category_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(task_category_cancel_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_category_edit_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout task_category_edit_paneLayout = new javax.swing.GroupLayout(task_category_edit_pane);
        task_category_edit_pane.setLayout(task_category_edit_paneLayout);
        task_category_edit_paneLayout.setHorizontalGroup(
            task_category_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(task_category_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(task_category_edit_name_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_category_edit_description_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_category_edit_creation_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_category_edit_actions_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        task_category_edit_paneLayout.setVerticalGroup(
            task_category_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_category_edit_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_name_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_category_edit_description_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_category_edit_creation_info_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_category_edit_actions_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        task_edit_name_label.setText("Task Name:");

        task_edit_priority_label.setText("Priority:");

        task_edit_priority_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "top", "second", "third", "low" }));

        task_edit_priority_colour_pane.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout task_edit_priority_colour_paneLayout = new javax.swing.GroupLayout(task_edit_priority_colour_pane);
        task_edit_priority_colour_pane.setLayout(task_edit_priority_colour_paneLayout);
        task_edit_priority_colour_paneLayout.setHorizontalGroup(
            task_edit_priority_colour_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        task_edit_priority_colour_paneLayout.setVerticalGroup(
            task_edit_priority_colour_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout task_edit_name_paneLayout = new javax.swing.GroupLayout(task_edit_name_pane);
        task_edit_name_pane.setLayout(task_edit_name_paneLayout);
        task_edit_name_paneLayout.setHorizontalGroup(
            task_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_name_paneLayout.createSequentialGroup()
                .addComponent(task_edit_name_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_name_text, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(task_edit_priority_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_priority_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_priority_colour_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        task_edit_name_paneLayout.setVerticalGroup(
            task_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_edit_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_name_text)
            .addComponent(task_edit_priority_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_priority_options)
            .addComponent(task_edit_priority_colour_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        task_edit_description_label.setText("Description:");

        task_edit_description_text.setColumns(20);
        task_edit_description_text.setRows(5);
        jScrollPane2.setViewportView(task_edit_description_text);

        javax.swing.GroupLayout task_edit_description_paneLayout = new javax.swing.GroupLayout(task_edit_description_pane);
        task_edit_description_pane.setLayout(task_edit_description_paneLayout);
        task_edit_description_paneLayout.setHorizontalGroup(
            task_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_description_paneLayout.createSequentialGroup()
                .addComponent(task_edit_description_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );
        task_edit_description_paneLayout.setVerticalGroup(
            task_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_description_paneLayout.createSequentialGroup()
                .addComponent(task_edit_description_label)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );

        task_edit_assignment_label.setText("Assign to: Team Leader");

        task_edit_creator_label.setText("Created by: Manager");

        task_edit_creation_date_label.setText("on: Date");

        javax.swing.GroupLayout task_edit_creation_info_paneLayout = new javax.swing.GroupLayout(task_edit_creation_info_pane);
        task_edit_creation_info_pane.setLayout(task_edit_creation_info_paneLayout);
        task_edit_creation_info_paneLayout.setHorizontalGroup(
            task_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, task_edit_creation_info_paneLayout.createSequentialGroup()
                .addComponent(task_edit_creator_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_creation_date_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(task_edit_assignment_label)
                .addGap(114, 114, 114))
        );
        task_edit_creation_info_paneLayout.setVerticalGroup(
            task_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_edit_creator_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_creation_date_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_assignment_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        task_edit_due_date_label.setText("Due date:");

        task_edit_due_date_format_label.setText("mm/dd/yyyy");

        task_edit_status_label.setText("Status:");

        task_edit_status_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Started", "In Progress", "Completed" }));

        task_edit_recurrence_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "non-recurrent", "weekly", "monthly" }));

        javax.swing.GroupLayout task_edit_due_info_paneLayout = new javax.swing.GroupLayout(task_edit_due_info_pane);
        task_edit_due_info_pane.setLayout(task_edit_due_info_paneLayout);
        task_edit_due_info_paneLayout.setHorizontalGroup(
            task_edit_due_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_due_info_paneLayout.createSequentialGroup()
                .addComponent(task_edit_due_date_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_due_date_text, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_due_date_format_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_recurrence_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(task_edit_status_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_status_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        task_edit_due_info_paneLayout.setVerticalGroup(
            task_edit_due_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_edit_due_date_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_due_date_text)
            .addGroup(task_edit_due_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(task_edit_due_date_format_label, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(task_edit_recurrence_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(task_edit_due_info_paneLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(task_edit_status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(task_edit_status_options)
        );

        task_edit_task_categories_action_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No action", "Add to", "Remove from" }));

        task_edit_task_categories_option_label.setText("task category:");

        task_edit_task_categories_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout task_edit_task_categories_paneLayout = new javax.swing.GroupLayout(task_edit_task_categories_pane);
        task_edit_task_categories_pane.setLayout(task_edit_task_categories_paneLayout);
        task_edit_task_categories_paneLayout.setHorizontalGroup(
            task_edit_task_categories_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_task_categories_paneLayout.createSequentialGroup()
                .addComponent(task_edit_task_categories_action_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_task_categories_option_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_task_categories_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        task_edit_task_categories_paneLayout.setVerticalGroup(
            task_edit_task_categories_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_edit_task_categories_action_options)
            .addComponent(task_edit_task_categories_option_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_task_categories_options)
        );

        task_edit_update_button.setText("Update");
        task_edit_update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                task_edit_update_buttonActionPerformed(evt);
            }
        });

        task_edit_cancel_update_button.setText("cancel");

        task_edit_actions_message.setText("Message");

        javax.swing.GroupLayout task_edit_actions_paneLayout = new javax.swing.GroupLayout(task_edit_actions_pane);
        task_edit_actions_pane.setLayout(task_edit_actions_paneLayout);
        task_edit_actions_paneLayout.setHorizontalGroup(
            task_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_actions_paneLayout.createSequentialGroup()
                .addComponent(task_edit_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_cancel_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_actions_message, javax.swing.GroupLayout.PREFERRED_SIZE, 618, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        task_edit_actions_paneLayout.setVerticalGroup(
            task_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_edit_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(task_edit_cancel_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_actions_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout task_edit_paneLayout = new javax.swing.GroupLayout(task_edit_pane);
        task_edit_pane.setLayout(task_edit_paneLayout);
        task_edit_paneLayout.setHorizontalGroup(
            task_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(task_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(task_edit_name_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_edit_description_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_edit_creation_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_edit_due_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_edit_task_categories_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(task_edit_actions_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        task_edit_paneLayout.setVerticalGroup(
            task_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(task_edit_paneLayout.createSequentialGroup()
                .addComponent(task_edit_name_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_description_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_creation_info_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_due_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_task_categories_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_actions_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        subtask_edit_name_label.setText("Subtask Name:");

        subtask_edit_priority_label.setText("Priority:");

        subtask_edit_priority_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "top", "second", "third", "low" }));

        subtask_edit_priority_colour_pane.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout subtask_edit_priority_colour_paneLayout = new javax.swing.GroupLayout(subtask_edit_priority_colour_pane);
        subtask_edit_priority_colour_pane.setLayout(subtask_edit_priority_colour_paneLayout);
        subtask_edit_priority_colour_paneLayout.setHorizontalGroup(
            subtask_edit_priority_colour_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        subtask_edit_priority_colour_paneLayout.setVerticalGroup(
            subtask_edit_priority_colour_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout subtask_edit_name_paneLayout = new javax.swing.GroupLayout(subtask_edit_name_pane);
        subtask_edit_name_pane.setLayout(subtask_edit_name_paneLayout);
        subtask_edit_name_paneLayout.setHorizontalGroup(
            subtask_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_name_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_name_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_name_text, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subtask_edit_priority_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_priority_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_priority_colour_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        subtask_edit_name_paneLayout.setVerticalGroup(
            subtask_edit_name_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subtask_edit_name_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_name_text)
            .addComponent(subtask_edit_priority_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_priority_options)
            .addComponent(subtask_edit_priority_colour_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        subtask_edit_description_label.setText("Description:");

        subtask_edit_description_text.setColumns(20);
        subtask_edit_description_text.setRows(5);
        jScrollPane3.setViewportView(subtask_edit_description_text);

        javax.swing.GroupLayout subtask_edit_description_paneLayout = new javax.swing.GroupLayout(subtask_edit_description_pane);
        subtask_edit_description_pane.setLayout(subtask_edit_description_paneLayout);
        subtask_edit_description_paneLayout.setHorizontalGroup(
            subtask_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_description_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_description_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3))
        );
        subtask_edit_description_paneLayout.setVerticalGroup(
            subtask_edit_description_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_description_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_description_label)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3)
        );

        subtask_edit_assignment_label.setText("Assign to:");

        subtask_edit_creator_label.setText("Created by: Manager");

        subtask_edit_creation_date_label.setText("on: Date");

        subtask_edit_assignment_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout subtask_edit_creation_info_paneLayout = new javax.swing.GroupLayout(subtask_edit_creation_info_pane);
        subtask_edit_creation_info_pane.setLayout(subtask_edit_creation_info_paneLayout);
        subtask_edit_creation_info_paneLayout.setHorizontalGroup(
            subtask_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, subtask_edit_creation_info_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_creator_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_creation_date_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subtask_edit_assignment_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_assignment_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );
        subtask_edit_creation_info_paneLayout.setVerticalGroup(
            subtask_edit_creation_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subtask_edit_creator_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_creation_date_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_assignment_options)
            .addComponent(subtask_edit_assignment_label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        subtask_edit_due_date_label.setText("Due date:");

        subtask_edit_due_date_format_label.setText("mm/dd/yyyy");

        subtask_edit_status_label.setText("Status:");

        subtask_edit_status_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Not Started", "In Progress", "Completed" }));

        javax.swing.GroupLayout subtask_edit_due_info_paneLayout = new javax.swing.GroupLayout(subtask_edit_due_info_pane);
        subtask_edit_due_info_pane.setLayout(subtask_edit_due_info_paneLayout);
        subtask_edit_due_info_paneLayout.setHorizontalGroup(
            subtask_edit_due_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_due_info_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_due_date_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_due_date_text, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_due_date_format_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(subtask_edit_status_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_status_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        subtask_edit_due_info_paneLayout.setVerticalGroup(
            subtask_edit_due_info_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subtask_edit_due_date_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_due_date_text)
            .addComponent(subtask_edit_due_date_format_label, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(subtask_edit_due_info_paneLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(subtask_edit_status_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(subtask_edit_status_options, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
        );

        subtask_edit_parent_task_label.setText("Parent Task:");

        subtask_edit_parent_task_options.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout subtask_edit_parent_task_paneLayout = new javax.swing.GroupLayout(subtask_edit_parent_task_pane);
        subtask_edit_parent_task_pane.setLayout(subtask_edit_parent_task_paneLayout);
        subtask_edit_parent_task_paneLayout.setHorizontalGroup(
            subtask_edit_parent_task_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_parent_task_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_parent_task_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_parent_task_options, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        subtask_edit_parent_task_paneLayout.setVerticalGroup(
            subtask_edit_parent_task_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subtask_edit_parent_task_options)
            .addComponent(subtask_edit_parent_task_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        subtask_edit_update_button.setText("Update");
        subtask_edit_update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtask_edit_update_buttonActionPerformed(evt);
            }
        });

        subtask_edit_cancel_update_button.setText("cancel");

        subtask_edit_actions_message.setText("Message");

        javax.swing.GroupLayout subtask_edit_actions_paneLayout = new javax.swing.GroupLayout(subtask_edit_actions_pane);
        subtask_edit_actions_pane.setLayout(subtask_edit_actions_paneLayout);
        subtask_edit_actions_paneLayout.setHorizontalGroup(
            subtask_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_actions_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_cancel_update_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_actions_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        subtask_edit_actions_paneLayout.setVerticalGroup(
            subtask_edit_actions_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(subtask_edit_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addComponent(subtask_edit_cancel_update_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_actions_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout subtask_edit_paneLayout = new javax.swing.GroupLayout(subtask_edit_pane);
        subtask_edit_pane.setLayout(subtask_edit_paneLayout);
        subtask_edit_paneLayout.setHorizontalGroup(
            subtask_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_paneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subtask_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subtask_edit_name_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subtask_edit_description_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subtask_edit_creation_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subtask_edit_due_info_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subtask_edit_parent_task_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subtask_edit_actions_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        subtask_edit_paneLayout.setVerticalGroup(
            subtask_edit_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subtask_edit_paneLayout.createSequentialGroup()
                .addComponent(subtask_edit_name_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_description_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_creation_info_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_due_info_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_parent_task_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_actions_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        productivity_panel.setLayout(new java.awt.GridLayout(1, 2));

        team_productivity_title_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        team_productivity_title_label.setText("Team Productivity");

        javax.swing.GroupLayout team_productivity_title_panelLayout = new javax.swing.GroupLayout(team_productivity_title_panel);
        team_productivity_title_panel.setLayout(team_productivity_title_panelLayout);
        team_productivity_title_panelLayout.setHorizontalGroup(
            team_productivity_title_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_title_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_title_label)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        team_productivity_title_panelLayout.setVerticalGroup(
            team_productivity_title_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_title_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0);
        flowLayout1.setAlignOnBaseline(true);
        team_productivity_progress_panel.setLayout(flowLayout1);

        team_productivity_progress_completed.setBackground(new java.awt.Color(51, 255, 255));
        team_productivity_progress_completed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        team_productivity_progress_completed.setText("23%");
        team_productivity_progress_completed.setOpaque(true);
        team_productivity_progress_panel.add(team_productivity_progress_completed);

        team_productivity_progress_in_progress.setBackground(new java.awt.Color(255, 0, 255));
        team_productivity_progress_in_progress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        team_productivity_progress_in_progress.setText("46%");
        team_productivity_progress_in_progress.setOpaque(true);
        team_productivity_progress_panel.add(team_productivity_progress_in_progress);

        team_productivity_progress_not_started.setBackground(new java.awt.Color(204, 204, 204));
        team_productivity_progress_not_started.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        team_productivity_progress_not_started.setText("31%");
        team_productivity_progress_not_started.setOpaque(true);
        team_productivity_progress_panel.add(team_productivity_progress_not_started);

        team_productivity_completed_label.setText("completed work");

        team_productivity_completed_colour.setBackground(new java.awt.Color(51, 255, 255));

        javax.swing.GroupLayout team_productivity_completed_colourLayout = new javax.swing.GroupLayout(team_productivity_completed_colour);
        team_productivity_completed_colour.setLayout(team_productivity_completed_colourLayout);
        team_productivity_completed_colourLayout.setHorizontalGroup(
            team_productivity_completed_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        team_productivity_completed_colourLayout.setVerticalGroup(
            team_productivity_completed_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout team_productivity_completed_panelLayout = new javax.swing.GroupLayout(team_productivity_completed_panel);
        team_productivity_completed_panel.setLayout(team_productivity_completed_panelLayout);
        team_productivity_completed_panelLayout.setHorizontalGroup(
            team_productivity_completed_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_completed_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_completed_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_completed_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        team_productivity_completed_panelLayout.setVerticalGroup(
            team_productivity_completed_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_completed_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_completed_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_productivity_in_progress_label.setText("work in progress");

        team_productivity_in_progress_colour.setBackground(new java.awt.Color(255, 0, 255));

        javax.swing.GroupLayout team_productivity_in_progress_colourLayout = new javax.swing.GroupLayout(team_productivity_in_progress_colour);
        team_productivity_in_progress_colour.setLayout(team_productivity_in_progress_colourLayout);
        team_productivity_in_progress_colourLayout.setHorizontalGroup(
            team_productivity_in_progress_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        team_productivity_in_progress_colourLayout.setVerticalGroup(
            team_productivity_in_progress_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout team_productivity_in_progress_panelLayout = new javax.swing.GroupLayout(team_productivity_in_progress_panel);
        team_productivity_in_progress_panel.setLayout(team_productivity_in_progress_panelLayout);
        team_productivity_in_progress_panelLayout.setHorizontalGroup(
            team_productivity_in_progress_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_in_progress_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_in_progress_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_in_progress_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        team_productivity_in_progress_panelLayout.setVerticalGroup(
            team_productivity_in_progress_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_in_progress_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_in_progress_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_productivity_not_started_label.setText("work not started");

        team_productivity_not_started_colour.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout team_productivity_not_started_colourLayout = new javax.swing.GroupLayout(team_productivity_not_started_colour);
        team_productivity_not_started_colour.setLayout(team_productivity_not_started_colourLayout);
        team_productivity_not_started_colourLayout.setHorizontalGroup(
            team_productivity_not_started_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        team_productivity_not_started_colourLayout.setVerticalGroup(
            team_productivity_not_started_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout team_productivity_not_started_panelLayout = new javax.swing.GroupLayout(team_productivity_not_started_panel);
        team_productivity_not_started_panel.setLayout(team_productivity_not_started_panelLayout);
        team_productivity_not_started_panelLayout.setHorizontalGroup(
            team_productivity_not_started_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_not_started_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_not_started_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_not_started_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        team_productivity_not_started_panelLayout.setVerticalGroup(
            team_productivity_not_started_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_not_started_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_not_started_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_productivity_workload_label.setText("Workload:");

        team_productivity_workload_value.setText("27.35");

        javax.swing.GroupLayout team_productivity_workload_panelLayout = new javax.swing.GroupLayout(team_productivity_workload_panel);
        team_productivity_workload_panel.setLayout(team_productivity_workload_panelLayout);
        team_productivity_workload_panelLayout.setHorizontalGroup(
            team_productivity_workload_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_workload_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_workload_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_workload_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        team_productivity_workload_panelLayout.setVerticalGroup(
            team_productivity_workload_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_workload_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_workload_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_productivity_member_count_label.setText("Member count:");

        team_productivity_member_count_value.setText("5");

        javax.swing.GroupLayout team_productivity_member_count_panelLayout = new javax.swing.GroupLayout(team_productivity_member_count_panel);
        team_productivity_member_count_panel.setLayout(team_productivity_member_count_panelLayout);
        team_productivity_member_count_panelLayout.setHorizontalGroup(
            team_productivity_member_count_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_member_count_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_member_count_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_member_count_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        team_productivity_member_count_panelLayout.setVerticalGroup(
            team_productivity_member_count_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_member_count_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_member_count_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        team_productivity_evaluation_label.setText("Productivity:");

        team_productivity_evaluation_value.setText("13.47");

        javax.swing.GroupLayout team_productivity_evalutaion_panelLayout = new javax.swing.GroupLayout(team_productivity_evalutaion_panel);
        team_productivity_evalutaion_panel.setLayout(team_productivity_evalutaion_panelLayout);
        team_productivity_evalutaion_panelLayout.setHorizontalGroup(
            team_productivity_evalutaion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_evalutaion_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_evaluation_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_evaluation_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        team_productivity_evalutaion_panelLayout.setVerticalGroup(
            team_productivity_evalutaion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(team_productivity_evaluation_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_productivity_evaluation_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout team_productivity_panelLayout = new javax.swing.GroupLayout(team_productivity_panel);
        team_productivity_panel.setLayout(team_productivity_panelLayout);
        team_productivity_panelLayout.setHorizontalGroup(
            team_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(team_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(team_productivity_title_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_progress_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_completed_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_in_progress_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_not_started_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_workload_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_member_count_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(team_productivity_evalutaion_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        team_productivity_panelLayout.setVerticalGroup(
            team_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(team_productivity_panelLayout.createSequentialGroup()
                .addComponent(team_productivity_title_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_progress_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_completed_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(team_productivity_in_progress_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(team_productivity_not_started_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_member_count_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_workload_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(team_productivity_evalutaion_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        productivity_panel.add(team_productivity_panel);

        member_productivity_title_label.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        member_productivity_title_label.setText("Member Productivity");

        javax.swing.GroupLayout member_productivity_title_panelLayout = new javax.swing.GroupLayout(member_productivity_title_panel);
        member_productivity_title_panel.setLayout(member_productivity_title_panelLayout);
        member_productivity_title_panelLayout.setHorizontalGroup(
            member_productivity_title_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_title_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_title_label)
                .addGap(0, 254, Short.MAX_VALUE))
        );
        member_productivity_title_panelLayout.setVerticalGroup(
            member_productivity_title_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_title_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0);
        flowLayout2.setAlignOnBaseline(true);
        member_productivity_progress_panel.setLayout(flowLayout2);

        member_productivity_progress_completed.setBackground(new java.awt.Color(51, 255, 255));
        member_productivity_progress_completed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        member_productivity_progress_completed.setText("23%");
        member_productivity_progress_completed.setOpaque(true);
        member_productivity_progress_panel.add(member_productivity_progress_completed);

        member_productivity_progress_in_progress.setBackground(new java.awt.Color(255, 0, 255));
        member_productivity_progress_in_progress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        member_productivity_progress_in_progress.setText("46%");
        member_productivity_progress_in_progress.setOpaque(true);
        member_productivity_progress_panel.add(member_productivity_progress_in_progress);

        member_productivity_progress_not_started.setBackground(new java.awt.Color(204, 204, 204));
        member_productivity_progress_not_started.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        member_productivity_progress_not_started.setText("31%");
        member_productivity_progress_not_started.setOpaque(true);
        member_productivity_progress_panel.add(member_productivity_progress_not_started);

        member_productivity_completed_label.setText("completed work");

        member_productivity_completed_colour.setBackground(new java.awt.Color(51, 255, 255));

        javax.swing.GroupLayout member_productivity_completed_colourLayout = new javax.swing.GroupLayout(member_productivity_completed_colour);
        member_productivity_completed_colour.setLayout(member_productivity_completed_colourLayout);
        member_productivity_completed_colourLayout.setHorizontalGroup(
            member_productivity_completed_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        member_productivity_completed_colourLayout.setVerticalGroup(
            member_productivity_completed_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout member_productivity_completed_panelLayout = new javax.swing.GroupLayout(member_productivity_completed_panel);
        member_productivity_completed_panel.setLayout(member_productivity_completed_panelLayout);
        member_productivity_completed_panelLayout.setHorizontalGroup(
            member_productivity_completed_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_completed_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_completed_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_completed_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        member_productivity_completed_panelLayout.setVerticalGroup(
            member_productivity_completed_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_completed_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_completed_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        member_productivity_in_progress_label.setText("work in progress");

        member_productivity_in_progress_colour.setBackground(new java.awt.Color(255, 0, 255));

        javax.swing.GroupLayout member_productivity_in_progress_colourLayout = new javax.swing.GroupLayout(member_productivity_in_progress_colour);
        member_productivity_in_progress_colour.setLayout(member_productivity_in_progress_colourLayout);
        member_productivity_in_progress_colourLayout.setHorizontalGroup(
            member_productivity_in_progress_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        member_productivity_in_progress_colourLayout.setVerticalGroup(
            member_productivity_in_progress_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout member_productivity_in_progress_panelLayout = new javax.swing.GroupLayout(member_productivity_in_progress_panel);
        member_productivity_in_progress_panel.setLayout(member_productivity_in_progress_panelLayout);
        member_productivity_in_progress_panelLayout.setHorizontalGroup(
            member_productivity_in_progress_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_in_progress_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_in_progress_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_in_progress_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        member_productivity_in_progress_panelLayout.setVerticalGroup(
            member_productivity_in_progress_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_in_progress_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_in_progress_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        member_productivity_not_started_label.setText("work not started");

        member_productivity_not_started_colour.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout member_productivity_not_started_colourLayout = new javax.swing.GroupLayout(member_productivity_not_started_colour);
        member_productivity_not_started_colour.setLayout(member_productivity_not_started_colourLayout);
        member_productivity_not_started_colourLayout.setHorizontalGroup(
            member_productivity_not_started_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        member_productivity_not_started_colourLayout.setVerticalGroup(
            member_productivity_not_started_colourLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout member_productivity_not_started_panelLayout = new javax.swing.GroupLayout(member_productivity_not_started_panel);
        member_productivity_not_started_panel.setLayout(member_productivity_not_started_panelLayout);
        member_productivity_not_started_panelLayout.setHorizontalGroup(
            member_productivity_not_started_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_not_started_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_not_started_colour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_not_started_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        member_productivity_not_started_panelLayout.setVerticalGroup(
            member_productivity_not_started_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_not_started_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_not_started_colour, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        member_productivity_evaluation_label.setText("Productivity:");

        member_productivity_evaluation_value.setText("13.47");

        javax.swing.GroupLayout member_productivity_evalutaion_panelLayout = new javax.swing.GroupLayout(member_productivity_evalutaion_panel);
        member_productivity_evalutaion_panel.setLayout(member_productivity_evalutaion_panelLayout);
        member_productivity_evalutaion_panelLayout.setHorizontalGroup(
            member_productivity_evalutaion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_evalutaion_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_evaluation_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_evaluation_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        member_productivity_evalutaion_panelLayout.setVerticalGroup(
            member_productivity_evalutaion_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_evaluation_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_evaluation_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        member_productivity_workload_label.setText("Workload:");

        member_productivity_workload_value.setText("27.35");

        javax.swing.GroupLayout member_productivity_workload_panelLayout = new javax.swing.GroupLayout(member_productivity_workload_panel);
        member_productivity_workload_panel.setLayout(member_productivity_workload_panelLayout);
        member_productivity_workload_panelLayout.setHorizontalGroup(
            member_productivity_workload_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_workload_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_workload_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_workload_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        member_productivity_workload_panelLayout.setVerticalGroup(
            member_productivity_workload_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_workload_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_workload_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        member_productivity_username_label.setText("Member username:");

        member_productivity_username_value.setText("testing");

        javax.swing.GroupLayout member_productivity_username_panelLayout = new javax.swing.GroupLayout(member_productivity_username_panel);
        member_productivity_username_panel.setLayout(member_productivity_username_panelLayout);
        member_productivity_username_panelLayout.setHorizontalGroup(
            member_productivity_username_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_username_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_username_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_username_value)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        member_productivity_username_panelLayout.setVerticalGroup(
            member_productivity_username_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(member_productivity_username_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(member_productivity_username_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout member_productivity_panelLayout = new javax.swing.GroupLayout(member_productivity_panel);
        member_productivity_panel.setLayout(member_productivity_panelLayout);
        member_productivity_panelLayout.setHorizontalGroup(
            member_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(member_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(member_productivity_title_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_progress_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_completed_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_in_progress_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_not_started_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_workload_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_evalutaion_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(member_productivity_username_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        member_productivity_panelLayout.setVerticalGroup(
            member_productivity_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(member_productivity_panelLayout.createSequentialGroup()
                .addComponent(member_productivity_title_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_progress_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_completed_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(member_productivity_in_progress_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(member_productivity_not_started_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_username_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_workload_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(member_productivity_evalutaion_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        productivity_panel.add(member_productivity_panel);

        javax.swing.GroupLayout edit_content_paneLayout = new javax.swing.GroupLayout(edit_content_pane);
        edit_content_pane.setLayout(edit_content_paneLayout);
        edit_content_paneLayout.setHorizontalGroup(
            edit_content_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(task_category_edit_separator)
            .addComponent(task_category_edit_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(task_edit_separator)
            .addComponent(task_edit_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subtask_edit_separator)
            .addComponent(subtask_edit_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(productivity_separator)
            .addComponent(productivity_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        edit_content_paneLayout.setVerticalGroup(
            edit_content_paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(edit_content_paneLayout.createSequentialGroup()
                .addComponent(task_category_edit_separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_category_edit_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(task_edit_separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(task_edit_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(subtask_edit_separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtask_edit_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(productivity_separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productivity_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        team_leaders_page_team_content_pane.add(edit_content_pane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(team_leaders_page_team_content_pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header_pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(team_leaders_page_team_content_pane, javax.swing.GroupLayout.DEFAULT_SIZE, 1048, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
        Function to update the selected task category when the update-category button is clicked (and released):
    */
    private void task_category_update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_task_category_update_buttonActionPerformed
        
        // Get information from the UI:
        String new_name = this.task_category_edit_name_text.getText();
        String new_description = this.task_category_edit_description_text.getText();
        
        // Validate data: Check not empty
        if (new_name.length() == 0) {
            this.task_category_edit_message.setText("Category name is empty.");
            return;
        }
        if (new_description.length() == 0) {
            this.task_category_edit_message.setText("Category description is empty.");
            return;
        }
        
        // Preprocess task category data update:
        boolean name_changed = false;
        boolean description_changed = false;
        String update_declaration = "UPDATE TASKCATEGORIES SET ";
        String update_fields = "";
        String update_conditions = "WHERE TASK_CATEGORY_ID = ?";
        if (!this._focused_task_category.name().equals(new_name)) {
            update_fields += "NAME = ? ";
            name_changed = true;
        }
        if (!this._focused_task_category.description().equals(new_description)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "CATEGORY_DESCRIPTION = ? ";
            description_changed = true;
        }
        if (update_fields.length() == 0) {
            this.task_category_edit_message.setText("No fields were changed.");
            return;
        }
        
        // Update task category data:
        DBConnection.connect();
        
        boolean updated = true;
        int field_counter = 1;
        PreparedStatement ps = DBConnection.prepared_statement(update_declaration + update_fields + update_conditions);
        updated = (ps != null && name_changed)? DBConnection.set_statement_value(ps, field_counter++, new_name) : updated;
        updated = (updated && description_changed)? DBConnection.set_statement_value(ps, field_counter++, new_description) : updated;
        updated = updated? DBConnection.set_statement_value(ps, field_counter, this._focused_task_category.ID()) : false;
        updated = updated? DBConnection.execute_update(ps) : false;
        updated = updated? DBConnection.close_statement(ps) : false;
        
        DBConnection.disconnect();
        if (!updated) {
            this.task_category_edit_message.setText("Error updating the task category. Category name might have been used.");
            return;
        }
        
        // Reload the page:
        if (this._focus == null) this.reload();
        else this.reload(Focus.TASK_CATEGORY, new_name);
        this.task_category_edit_message.setText("Task category updated.");
        
    }//GEN-LAST:event_task_category_update_buttonActionPerformed

    /*
        Function to update the selected task when the update-task button is clicked (and released):
    */
    private void task_edit_update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_task_edit_update_buttonActionPerformed
        
        // Get information from the UI:
        String new_name = this.task_edit_name_text.getText();
        short new_priority = (short) (this.task_edit_priority_options.getSelectedIndex() + 1);
        String new_description = this.task_edit_description_text.getText();
        String new_due_date = this.task_edit_due_date_text.getText();
        int new_recur_interval = Task.to_recur_interval(this.task_edit_recurrence_options.getSelectedItem().toString());
        String new_status = this.task_edit_status_options.getSelectedItem().toString();
        String category_action = this.task_edit_task_categories_action_options.getSelectedItem().toString();
        String selected_category = null;
        
        // Validate data:
        if (new_name.length() == 0) {
            this.task_edit_actions_message.setText("Task name is empty.");
            return;
        }
        if (new_description.length() == 0) {
            this.task_edit_actions_message.setText("Task description is empty.");
            return;
        }
        java.util.Date parsed_due_date;
        try { parsed_due_date = new SimpleDateFormat("MM/dd/yyyy").parse(new_due_date); } 
        catch(java.text.ParseException e) { 
            System.out.println(e);
            this.task_edit_actions_message.setText("Incorrect due date format.");
            return;
        }
        if (new java.util.Date().after(parsed_due_date)) {
            this.task_edit_actions_message.setText("Due date cannot be before the current date.");
            return;
        }
        if (new_recur_interval == -1) {
            this.task_edit_actions_message.setText("Recurrence selection is corrupted.");
            return;
        }
        if (category_action.equals("Add to") || category_action.equals("Remove from")) {
            selected_category = this.task_edit_task_categories_options.getSelectedItem().toString();
            if (selected_category.equals("[select category]")) {
                this.task_edit_actions_message.setText("No task category selected.");
                return;
            }
        }
        if (category_action.equals("Remove from") && this.task_edit_task_categories_options.getItemCount() == 2) {
            this.task_edit_actions_message.setText("Cannot leave the task without a category.");
            return;
        }
        
        // Preprocess task data update:
        boolean name_changed = false;
        boolean priority_changed = false;
        boolean description_changed = false;
        boolean due_date_changed = false;
        boolean recurrence_changed = false;
        boolean status_changed = false;
        String update_declaration = "UPDATE TASKS SET ";
        String update_fields = "";
        String update_conditions = "WHERE TASK_ID = ? AND DELETED != 'Y'";
        if (!this._focused_task.name().equals(new_name)) {
            update_fields += "NAME = ? ";
            name_changed = true;
        }
        if (this._focused_task.priority() != new_priority) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "TASK_PRIORITY = ? ";
            priority_changed = true;
        }
        if (!this._focused_task.description().equals(new_description)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "TASK_DESCRIPTION = ? ";
            description_changed = true;
        }
        if (!this._focused_task.due_date().equals(parsed_due_date)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "DUE_DATE = ? ";
            due_date_changed = true;
        }
        if (this._focused_task.recur_interval() != new_recur_interval) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "RECUR_INTERVAL = ? ";
            recurrence_changed = true;
        }
        if (!this._focused_task.status().equals(new_status)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "STATUS = ? ";
            status_changed = true;
        }
        if (update_fields.length() == 0 && selected_category == null) {
            this.task_edit_actions_message.setText("No fields were changed.");
            return;
        }
        
        // Update task data:
        DBConnection.connect();
        DBConnection.transaction(DBConnection.Transaction.BEGIN);
        
        boolean updated = true;
        PreparedStatement ps = null;
        if (update_fields.length() != 0) {  // task data should be updated
            int field_counter = 1;
            ps = DBConnection.prepared_statement(update_declaration + update_fields + update_conditions);
            updated = (ps != null && name_changed)? DBConnection.set_statement_value(ps, field_counter++, new_name) : updated;
            updated = (updated && priority_changed)? DBConnection.set_statement_value(ps, field_counter++, new_priority) : updated;
            updated = (updated && description_changed)? DBConnection.set_statement_value(ps, field_counter++, new_description) : updated;
            updated = (updated && due_date_changed)? DBConnection.set_statement_value(ps, field_counter++, new java.sql.Date(parsed_due_date.getTime())) : updated;
            updated = (updated && recurrence_changed)? DBConnection.set_statement_value(ps, field_counter++, new_recur_interval) : updated;
            updated = (updated && status_changed)? DBConnection.set_statement_value(ps, field_counter++, new_status) : updated;
            updated = updated? DBConnection.set_statement_value(ps, field_counter, this._focused_task.ID()) : false;
            updated = updated? DBConnection.execute_update(ps, true) : false;
            updated = updated? DBConnection.close_statement(ps) : false;

            if (!updated) {
                this.task_edit_actions_message.setText("Error updating the task. Task name might have been used.");
                DBConnection.transaction(DBConnection.Transaction.ROLLBACK);
                DBConnection.transaction(DBConnection.Transaction.END);
                DBConnection.disconnect(); return;
            }
        }
        
        // Update task in categories data:
        if (category_action.equals("Add to"))
            ps = DBConnection.prepared_statement("INSERT INTO TASKINCATEGORIES(TASK_ID, TASK_CATEGORY_ID) VALUES(?, ?)");
        else if (category_action.equals("Remove from"))
            ps = DBConnection.prepared_statement("DELETE FROM TASKINCATEGORIES WHERE TASK_ID = ? AND TASK_CATEGORY_ID = ?");
        
        if (selected_category != null) {
            updated = (ps != null)? DBConnection.set_statement_value(ps, 1, this._focused_task.ID()) : false;
            updated = updated? DBConnection.set_statement_value(ps, 2, this._task_category_map.get(selected_category).ID()) : false; // set category ID
            updated = updated? DBConnection.execute_update(ps) : false;
            updated = updated? DBConnection.close_statement(ps) : false;
            if (!updated) {
                this.task_edit_actions_message.setText("Error updating the task. Failed to update the selected task category.");
                DBConnection.transaction(DBConnection.Transaction.ROLLBACK);
            }
        }
        
        DBConnection.transaction(DBConnection.Transaction.END);
        DBConnection.disconnect();
        
        // Reload the page:
        if (!updated) return;  // if the last database update failed, do not reload the page
        if (this._focus == null) this.reload();
        else this.reload(Focus.TASK, new_name);
        this.task_edit_actions_message.setText("Task updated.");
        
    }//GEN-LAST:event_task_edit_update_buttonActionPerformed

    /*
        Function to update the selected subtask when the update-subtask button is clicked (and released):
    */
    private void subtask_edit_update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtask_edit_update_buttonActionPerformed
        
        // Get information from the UI:
        String new_name = this.subtask_edit_name_text.getText();
        short new_priority = (short) (this.subtask_edit_priority_options.getSelectedIndex() + 1);
        String new_description = this.subtask_edit_description_text.getText();
        String new_assignment = this.subtask_edit_assignment_options.getSelectedItem().toString();
        String new_due_date = this.subtask_edit_due_date_text.getText();
        String new_status = this.subtask_edit_status_options.getSelectedItem().toString();
        String new_parent = this.subtask_edit_parent_task_options.getSelectedItem().toString();
        int new_parent_ID = -1;
        
        // Validate data:
        if (new_name.length() == 0) {
            this.subtask_edit_actions_message.setText("Subtask name is empty.");
            return;
        }
        if (new_description.length() == 0) {
            this.subtask_edit_actions_message.setText("Subtask description is empty.");
            return;
        }
        java.util.Date parsed_due_date;
        try { parsed_due_date = new SimpleDateFormat("MM/dd/yyyy").parse(new_due_date); } 
        catch(java.text.ParseException e) { 
            System.out.println(e);
            this.subtask_edit_actions_message.setText("Incorrect due date format.");
            return;
        }
        if (new java.util.Date().after(parsed_due_date)) {
            this.subtask_edit_actions_message.setText("Due date cannot be before the current date.");
            return;
        }
        for (TaskCategory category: this._task_category_map.values()) {
            for (Task task : category.tasks_in_category()) {
                if (task.name().equals(new_parent)) 
                { new_parent_ID = task.ID(); break; }
            }
            if (new_parent_ID != -1) break;
        }
        if (new_parent_ID == -1) { // confirm new parent ID
            this.subtask_edit_actions_message.setText("ERROR: The task category tree map has been corrupted!");
            return;
        }
        
        
        // Preprocess subtask data update:
        boolean name_changed = false;
        boolean priority_changed = false;
        boolean description_changed = false;
        boolean assignment_changed = false;
        boolean due_date_changed = false;
        boolean status_changed = false;
        boolean parent_changed = false;
        String update_declaration = "UPDATE SUBTASK SET ";
        String update_fields = "";
        String update_conditions = "WHERE SUBTASK_ID = ? AND DELETED != 'Y'";
        if (!this._focused_subtask.name().equals(new_name)) {
            update_fields += "NAME = ? ";
            name_changed = true;
        }
        if (this._focused_subtask.priority() != new_priority) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "PRIORITY = ? ";
            priority_changed = true;
        }
        if (!this._focused_subtask.description().equals(new_description)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "DESCRIPTION = ? ";
            description_changed = true;
        }
        if (!this._focused_subtask.assigned_to_member_username().equals(new_assignment)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "ASSIGNED_TO_MEMBER_ID = (SELECT U.MEMBER_ID FROM MEMBERS U WHERE U.USERNAME = ? AND U.DELETED != 'Y') ";
            assignment_changed = true;
        }
        if (!this._focused_subtask.due_date().equals(parsed_due_date)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "DUE_DATE = ? ";
            due_date_changed = true;
        }
        if (!this._focused_subtask.status().equals(new_status)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "STATUS = ? ";
            status_changed = true;
        }
        if (!this._focused_subtask.parent_task().name().equals(new_parent)) {
            if (update_fields.length() != 0) update_fields += ", ";
            update_fields += "SUBTASK_TO = ? ";
            parent_changed = true;
        }
        if (update_fields.length() == 0) {
            this.subtask_edit_actions_message.setText("No fields were changed.");
            return;
        }
        
        // Update subtask data:
        DBConnection.connect();
        
        boolean updated = true;
        int field_counter = 1;
        PreparedStatement ps = DBConnection.prepared_statement(update_declaration + update_fields + update_conditions);
        updated = (ps != null && name_changed)? DBConnection.set_statement_value(ps, field_counter++, new_name) : updated;
        updated = (updated && priority_changed)? DBConnection.set_statement_value(ps, field_counter++, new_priority) : updated;
        updated = (updated && description_changed)? DBConnection.set_statement_value(ps, field_counter++, new_description) : updated;
        updated = (updated && assignment_changed)? DBConnection.set_statement_value(ps, field_counter++, new_assignment) : updated;
        updated = (updated && due_date_changed)? DBConnection.set_statement_value(ps, field_counter++, new java.sql.Date(parsed_due_date.getTime())) : updated;
        updated = (updated && status_changed)? DBConnection.set_statement_value(ps, field_counter++, new_status) : updated;
        updated = (updated && parent_changed)? DBConnection.set_statement_value(ps, field_counter++, new_parent_ID) : updated;
        updated = updated ? DBConnection.set_statement_value(ps, field_counter, this._focused_subtask.ID()) : false;
        updated = updated ? DBConnection.execute_update(ps) : false;
        updated = updated? DBConnection.close_statement(ps) : false;

        DBConnection.disconnect();
        
        if (!updated) {
            this.subtask_edit_actions_message.setText("Error updating the subtask. Subtask name might have been used.");
            return;
        }
            
        // Reload the page:
        if (this._focus == null) this.reload();
        else this.reload(Focus.SUBTASK, new_name);
        this.subtask_edit_actions_message.setText("Subtask updated.");
        
    }//GEN-LAST:event_subtask_edit_update_buttonActionPerformed
    
    
    /*
        Function to log out when the logout button is clicked (and released): 
    */
    private void logout_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout_buttonActionPerformed
        SystemController.log_out();
    }//GEN-LAST:event_logout_buttonActionPerformed

    /*
        Function to navigate to the task page when the to-task-page button is clicked (released):
    */
    private void to_task_page_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_to_task_page_buttonActionPerformed
        SystemController.to_task_page();
    }//GEN-LAST:event_to_task_page_buttonActionPerformed

    
    
    
    public void reload() {
        this.reload(null, null);
    }
    
    public void reload(Focus focus, String search_name) {
        if (!this.__initialised__) {
            this.__init_edit_switch_response__();
            this.__initialised__ = true;
        }
        
        // Reset local references:
        this._focus = focus;
        this._focused_task_category = null;
        this._focused_task = null;
        this._focused_subtask = null;
        this._task_category_map.clear();
        this._member_workload_stat_map.clear();
        this._user_list.clear();
        
        // Load data from the database:
        DBConnection.connect();
        boolean loaded = this.__renew_team_tasks__()
                        && this.__reload_task_structure__(search_name)
                        && this.__reload_members__()
                        && this.__reload_productivity__();
        DBConnection.disconnect();
        if (!loaded) {
            this.header_team_label.setText("Page Loading Failed Due to Database Error!");
            return;
            /*
            Possible issues:
            1. Periodic Tasks not Updated
            2. Task Structure Not Properly Loaded
            3. Team Members Not Properly Loaded
            4. Productivity Statistics Not Properly Loaded
            */
        }
        
        // Refresh the page:
        this.refresh();
    }
    
    
    /*
        Function to have the database update periodic tasks.
        Function call must be between a DBConnection.connect and .disconnect session.
    */
    private boolean __renew_team_tasks__() {
        // TODO: Set up a restriction for this update to fire only once-per hour
        // Update the database task recurrences:
        CallableStatement cs = DBConnection.callable_statement("RENEW_TEAM_TASKS(:team_ID, :message)");
        boolean loaded = (cs != null) 
                        && DBConnection.set_statement_value(cs, ":team_ID", SystemController.current_team.team_ID())
                        && DBConnection.register_out_parameter(cs, ":message", Types.VARCHAR)
                        && DBConnection.execute(cs)
                        && DBConnection.close_statement(cs);
        if (!loaded)
            System.out.println("ERROR: Periodic task update failed!");
        return loaded;
    }
    
    
    /*
        Function to load task categories, tasks, and subtasks of the current team from the database.
        Function call must be between a DBConnection.connect and .disconnect session.
    */
    private boolean __reload_task_structure__(String search_name) {
        
        String team_ID = SystemController.current_team.team_ID();
        
        CallableStatement cs = DBConnection.full_callable_statement(
            "DECLARE " +
                "tsk_table TASK_STRUCTURE_PKG.TSK_TABLE; " +
                "sbtsk_table TASK_STRUCTURE_PKG.SBTSK_TABLE; " +
            "BEGIN " +
                "SELECT_TASK_STRUCT(:leader_username, :tsk_cat_cur, :tsk_cur, :sbtsk_cur, :tsk_group_cur, tsk_table, sbtsk_table); " +
            "END;"
        );
        
        boolean loaded = (cs != null) 
                        && DBConnection.set_statement_value(cs, ":leader_username", SystemController.current_team.leader_username()) 
                        && DBConnection.register_out_parameter(cs, ":tsk_cat_cur", OracleTypes.CURSOR)
                        && DBConnection.register_out_parameter(cs, ":tsk_cur", OracleTypes.CURSOR)
                        && DBConnection.register_out_parameter(cs, ":sbtsk_cur", OracleTypes.CURSOR)
                        && DBConnection.register_out_parameter(cs, ":tsk_group_cur", OracleTypes.CURSOR)
                        && DBConnection.execute(cs);
        
        if (!loaded) {
            System.out.println("Task structure query failed for Team Leader's Page!");
            DBConnection.close_statement(cs);
            return false;
        }
        
        // Get task categories:
        ResultSet rs = DBConnection.get_cursor_result(cs, ":tsk_cat_cur");
        try {
            while (rs.next()) {
                TaskCategory category = new TaskCategory();
                category.set_ID(rs.getInt("TASK_CATEGORY_ID"));
                category.set_name(rs.getString("NAME"));
                category.set_description(rs.getString("CATEGORY_DESCRIPTION"));
                category.set_creator_username(rs.getString("CREATOR_USERNAME"));
                category.set_created_on(rs.getDate("CREATED_ON"));
                category.set_team_ID(team_ID);
                
                this._task_category_map.put(category.name(), category);
                if ( this._focus == Focus.TASK_CATEGORY && search_name.equals(category.name()) )
                    this._focused_task_category = category;
            }
        } catch(Exception e) {
            System.out.println(e);
            DBConnection.close_statement(cs);
            return false;
        }
        
        // Get tasks:
        TreeMap<Integer, Task> task_map = new TreeMap<>();
        rs = DBConnection.get_cursor_result(cs, ":tsk_cur");
        try {
            while (rs.next()) {
                Task task = new Task();
                task.set_ID(rs.getInt("TASK_ID"));
                task.set_name(rs.getString("NAME"));
                task.set_description(rs.getString("DESCRIPTION"));
                task.set_due_date(rs.getDate("DUE_DATE"));
                task.set_recur_interval(rs.getInt("RECUR_INTERVAL"));
                task.set_created_on(rs.getDate("CREATED_ON"));
                task.set_creator_username(rs.getString("CREATOR_USERNAME"));
                task.set_status(rs.getString("STATUS"));
                task.set_priority(rs.getShort("PRIORITY"));
                task.set_assigned_to_member_username(rs.getString("ASSIGNED_USERNAME"));
                task.set_team_ID(team_ID);
                
                task_map.put(task.ID(), task);
                if ( this._focus == Focus.TASK && search_name.equals(task.name()) )
                    this._focused_task = task;
            }
        } catch(Exception e) {
            System.out.println(e);
            DBConnection.close_statement(cs);
            return false;
        }
        
        // Get subtasks:
        rs = DBConnection.get_cursor_result(cs, ":sbtsk_cur");
        try {
            Task task;
            while(rs.next()) {
                task = task_map.get(rs.getInt("PARENT_ID"));
                Subtask subtask = new Subtask(task);
                subtask.set_ID(rs.getInt("SUBTASK_ID"));
                subtask.set_name(rs.getString("NAME"));
                subtask.set_description(rs.getString("DESCRIPTION"));
                subtask.set_due_date(rs.getDate("DUE_DATE"));
                subtask.set_created_on(rs.getDate("CREATED_ON"));
                subtask.set_creator_username(rs.getString("CREATOR_USERNAME"));
                subtask.set_status(rs.getString("STATUS"));
                subtask.set_priority(rs.getShort("PRIORITY"));
                subtask.set_assigned_to_member_username(rs.getString("ASSIGNED_USERNAME"));
                    
                task.add_subtask(subtask);
                if (this._focus == Focus.SUBTASK && search_name.equals(subtask.name()))
                    this._focused_subtask = subtask;
                }
        } catch(Exception e) {
            System.out.println(e);
            DBConnection.close_statement(cs);
            return false;
        }
            
        // Get category-task groupings:
        rs = DBConnection.get_cursor_result(cs, ":tsk_group_cur");
        try {
            while (rs.next()) {
                TaskCategory category = this._task_category_map.get(rs.getString("CATEGORY_NAME"));
                Task task = task_map.get(rs.getInt("TASK_ID"));
                category.add_task(task);    // couple local tasks and task categories
            }
        } catch(Exception e) {
            System.out.println(e);
            loaded = false;
        }
        
        DBConnection.close_statement(cs);
        return loaded;
    }
    
    /*
        Function to load the member data of this team from the database.
        Function call must be between a DBConnection.connect and .disconnect session.
    */
    private boolean __reload_members__() {
        PreparedStatement ps = DBConnection.prepared_statement("SELECT USERNAME, MEMBER_ROLE FROM MEMBERS WHERE TEAM_ID = ? AND DELETED != 'Y' ORDER BY USERNAME ASC");
        boolean loaded = (ps != null) && DBConnection.set_statement_value(ps, 1, SystemController.current_team.team_ID());
        ResultSet rs = DBConnection.execute_query(ps);
        
        try {
            while (rs.next()) {
                AppUser user = new AppUser();
                user.set_username(rs.getString("USERNAME"));
                user.set_role(AppUser.to_user_type(rs.getString("MEMBER_ROLE")));
                this._user_list.add(user);
            }
        } catch(Exception e) {
            System.out.println("ERROR: Users' data loading failed!");
            System.out.println(e);
            loaded = false;
        }
        
        loaded = DBConnection.close_statement(ps) && loaded;
        return loaded;
    }
    
    /*
        Function to load the productivity measurements from the database.
        Function call must be between a DBConnection.connect and .disconnect session.
    */
    private boolean __reload_productivity__() {
        // Query productivity statistics:
        CallableStatement cs = DBConnection.callable_statement("COMPUTE_PRODUCTIVITY(:team_ID, :member_workload, :team_workload)");
        boolean loaded = (cs != null) 
                        && DBConnection.set_statement_value(cs, ":team_ID", SystemController.current_team.team_ID())
                        && DBConnection.register_out_parameter(cs, ":member_workload", OracleTypes.CURSOR)
                        && DBConnection.register_out_parameter(cs, ":team_workload", OracleTypes.CURSOR)
                        && DBConnection.execute(cs);
        
        // Load member workload statistics:
        String last_user = "";
        String user = "";
        ResultSet rs = DBConnection.get_cursor_result(cs, ":member_workload");
        try {
            while (rs.next()) {
                user = rs.getString("USERNAME");
                // use this._team_workload_stat to temporarily store the user's workload statistics:
                if (last_user.equals(user)) // collect workload of the same user for a different status
                    this._team_workload_stat.set_record(rs.getFloat("SUBTASK_WEIGHTS"), rs.getInt("SUBTASK_COUNT"), rs.getString("STATUS"));
                else { // start collecting workload of a different user
                    last_user = user;
                    this._team_workload_stat = new WorkLoadGroup();
                    this._team_workload_stat.set_record(rs.getFloat("SUBTASK_WEIGHTS"), rs.getInt("SUBTASK_COUNT"), rs.getString("STATUS"));
                    this._member_workload_stat_map.put(user, this._team_workload_stat);
                }
            }
        } catch (Exception e) {
            System.out.println("ERROR: Failed to load member workload statistics!");
            System.out.println(e);
            DBConnection.close_statement(cs);
            return false;
        }
            
        // Load team workload statistics
        this._team_workload_stat = new WorkLoadGroup();
        this._team_workload_stat.set_member_count(this._user_list.size());
        rs = DBConnection.get_cursor_result(cs, ":team_workload");
        try {
            while (rs.next()) 
                this._team_workload_stat.set_record(rs.getFloat("TASK_WEIGHTS"), rs.getInt("TASK_COUNT"), rs.getString("STATUS"));
        } catch (Exception e) {
            System.out.println("ERROR: Failed to load team workload statistics!");
            System.out.println(e);
            loaded = false;
        }
        
        loaded = DBConnection.close_statement(cs) && loaded;
        return loaded;
    }
    
    
    
    private void hide_edit_panels() {
        this.task_category_edit_separator.setVisible(false);
        this.task_category_edit_pane.setVisible(false);
        this.task_edit_separator.setVisible(false);
        this.task_edit_pane.setVisible(false);
        this.subtask_edit_separator.setVisible(false);
        this.subtask_edit_pane.setVisible(false);
        this.productivity_separator.setVisible(false);
        this.productivity_panel.setVisible(false);
    }
    
    private void fill_task_category_edit_panel() {
        // Fill in task category information in the edit section:
        if (SystemController.current_user.role() == AppUser.UserType.MANAGER) // control access
            this.task_category_edit_name_text.setEnabled(true);
        else 
            this.task_category_edit_name_text.setEnabled(false);
        
        this.task_category_edit_name_text.setText(this._focused_task_category.name());
        this.task_category_edit_description_text.setText(this._focused_task_category.description());
        this.task_category_edit_creator_label.setText("Created by: " + this._focused_task_category.creator_username());
        this.task_category_edit_creation_date_label.setText("on: " + this._focused_task_category.str_created_on());
    
        // Reset visibility:
        this.task_category_edit_separator.setVisible(true);
        this.task_category_edit_pane.setVisible(true);
        this.task_edit_separator.setVisible(false);
        this.task_edit_pane.setVisible(false);
        this.subtask_edit_separator.setVisible(false);
        this.subtask_edit_pane.setVisible(false);
        this.productivity_separator.setVisible(false);
        this.productivity_panel.setVisible(false);
    }
    
    private void fill_task_edit_panel() {
        // Fill in task information in the edit section:
        if (SystemController.current_user.role() == AppUser.UserType.MANAGER) {
            this.task_edit_name_text.setEnabled(true);
            this.task_edit_priority_options.setEnabled(true);
            this.task_edit_due_date_text.setEnabled(true);
            this.task_edit_recurrence_options.setEnabled(true);
            this.task_edit_task_categories_options.setEnabled(true);
            this.task_edit_status_options.setEnabled(true);
        } else {
            this.task_edit_name_text.setEnabled(false);
            this.task_edit_priority_options.setEnabled(false);
            this.task_edit_due_date_text.setEnabled(false);
            this.task_edit_recurrence_options.setEnabled(false);
            this.task_edit_task_categories_options.setEnabled(false);
            this.task_edit_status_options.setEnabled(false);
        }
        
        this.task_edit_name_text.setText(this._focused_task.name());
        this.task_edit_priority_options.setSelectedIndex(this._focused_task.priority() - 1);
        this.task_edit_description_text.setText(this._focused_task.description());
        this.task_edit_creator_label.setText("Created by: " + this._focused_task.creator_username());
        this.task_edit_creation_date_label.setText("on: " + this._focused_task.str_created_on());
        this.task_edit_assignment_label.setText("Assigned to: " + this._focused_task.assigned_to_member_username());
        this.task_edit_due_date_text.setText(new SimpleDateFormat("MM/dd/yyyy").format(this._focused_task.due_date()));
        this.task_edit_recurrence_options.setSelectedItem(this._focused_task.recurrence_type());
        this.task_edit_status_options.setSelectedItem(this._focused_task.status());
        this.task_edit_task_categories_action_options.setSelectedIndex(0);
        this.task_edit_task_categories_options.removeAllItems();
        
        // Reset visibility:
        this.task_category_edit_separator.setVisible(false);
        this.task_category_edit_pane.setVisible(false);
        this.task_edit_separator.setVisible(true);
        this.task_edit_pane.setVisible(true);
        this.subtask_edit_separator.setVisible(false);
        this.subtask_edit_pane.setVisible(false);
        this.productivity_separator.setVisible(false);
        this.productivity_panel.setVisible(false);
    }
    
    private void fill_subtask_edit_panel() {
        // Fill in subtask information in the edit section:
        if (SystemController.current_user.role() == AppUser.UserType.MANAGER)
            this.subtask_edit_name_text.setEnabled(true);
        else 
            this.subtask_edit_name_text.setEnabled(false);
        
        this.subtask_edit_name_text.setText(this._focused_subtask.name());
        this.subtask_edit_priority_options.setSelectedIndex(this._focused_subtask.priority() - 1);
        this.subtask_edit_description_text.setText(this._focused_subtask.description());
        this.subtask_edit_creator_label.setText("Created by: " + this._focused_subtask.creator_username());
        this.subtask_edit_creation_date_label.setText("on: " + this._focused_subtask.str_created_on());
        this.subtask_edit_assignment_options.removeAllItems();
        for (AppUser user: this._user_list) {
            this.subtask_edit_assignment_options.addItem(user.username());
            if (user.username().equals(this._focused_subtask.assigned_to_member_username()))
                this.subtask_edit_assignment_options.setSelectedIndex(this.subtask_edit_assignment_options.getItemCount() - 1);
        }
        this.subtask_edit_due_date_text.setText(new SimpleDateFormat("MM/dd/yyyy").format(this._focused_subtask.due_date()));
        this.subtask_edit_status_options.setSelectedItem(this._focused_subtask.status());
        this.subtask_edit_parent_task_options.removeAllItems();
        TreeSet<String> task_set = new TreeSet<>();
        for (TaskCategory category: this._task_category_map.values()) {
            for (Task task: category.tasks_in_category())
                task_set.add(task.name());
            }
        for (String task_name: task_set) {
            this.subtask_edit_parent_task_options.addItem(task_name);
            if (this._focused_subtask.parent_task().name().equals(task_name))
                this.subtask_edit_parent_task_options.setSelectedIndex(this.subtask_edit_parent_task_options.getItemCount() - 1);
        }
        
        // Reset visibility:
        this.task_category_edit_separator.setVisible(false);
        this.task_category_edit_pane.setVisible(false);
        this.task_edit_separator.setVisible(false);
        this.task_edit_pane.setVisible(false);
        this.subtask_edit_separator.setVisible(true);
        this.subtask_edit_pane.setVisible(true);
        this.productivity_separator.setVisible(false);
        this.productivity_panel.setVisible(false);
    }
    
    private void fill_productivity_panel() {
        
        if (-1 < team_member_list.getSelectedIndex() ) {
            String[] user_info = team_member_list.getSelectedValue().toString().split(" - ", 2);
            WorkLoadGroup workload_group = this._member_workload_stat_map.get(user_info[1]); // user_info[1] is the selected username
            this.member_productivity_username_value.setText(user_info[1]); 
            
            float completed_portion = 0.0f;
            float in_progress_portion = 0.0f;
            float not_started_portion = 0.0f;
            if (workload_group == null) {
                this.member_productivity_workload_value.setText( String.format("%.2f", 0.0f) );
                this.member_productivity_evaluation_value.setText( String.format("%.2f", 0.0f) );
            } else {
                this.member_productivity_workload_value.setText( String.format("%.2f", workload_group.get_total_workload()) );
                this.member_productivity_evaluation_value.setText( String.format("%.2f", workload_group.compute_productivity()) );
                completed_portion = workload_group.get_workload_portion(WorkLoadGroup.COMPLETED);
                in_progress_portion = workload_group.get_workload_portion(WorkLoadGroup.IN_PROGRESS);
                not_started_portion = workload_group.get_workload_portion(WorkLoadGroup.NOT_STARTED);
            }
            
            int height = this.member_productivity_progress_panel.getHeight();
            int total_width = this.member_productivity_progress_panel.getWidth();
            this.member_productivity_progress_completed.setPreferredSize(new Dimension((int) (total_width * completed_portion), height));
            this.member_productivity_progress_in_progress.setPreferredSize(new Dimension((int) (total_width * in_progress_portion), height));
            this.member_productivity_progress_not_started.setPreferredSize(new Dimension((int) (total_width * not_started_portion), height));
            this.member_productivity_progress_completed.setText( String.format("%.2f", 100.0f * completed_portion) + "%" );
            this.member_productivity_progress_in_progress.setText( String.format("%.2f", 100.0f * in_progress_portion) + "%" );
            this.member_productivity_progress_not_started.setText( String.format("%.2f", 100.0f * not_started_portion) + "%" );
        }
        
        this.team_productivity_member_count_value.setText( Integer.toString(this._team_workload_stat.get_member_count()) );
        this.team_productivity_workload_value.setText( String.format("%.2f", this._team_workload_stat.get_total_workload()) );
        this.team_productivity_evaluation_value.setText( String.format("%.2f", this._team_workload_stat.compute_productivity()) );
        
        int height = this.team_productivity_progress_panel.getHeight();
        int total_width = this.team_productivity_progress_panel.getWidth();
        float completed_portion = this._team_workload_stat.get_workload_portion(WorkLoadGroup.COMPLETED);
        float in_progress_portion = this._team_workload_stat.get_workload_portion(WorkLoadGroup.IN_PROGRESS);
        float not_started_portion = this._team_workload_stat.get_workload_portion(WorkLoadGroup.NOT_STARTED);
        this.team_productivity_progress_completed.setPreferredSize(new Dimension((int) (total_width * completed_portion), height));
        this.team_productivity_progress_in_progress.setPreferredSize(new Dimension((int) (total_width * in_progress_portion), height));
        this.team_productivity_progress_not_started.setPreferredSize(new Dimension((int) (total_width * not_started_portion), height));
        this.team_productivity_progress_completed.setText( String.format("%.2f", 100.0f * completed_portion) + "%" );
        this.team_productivity_progress_in_progress.setText( String.format("%.2f", 100.0f * in_progress_portion) + "%" );
        this.team_productivity_progress_not_started.setText( String.format("%.2f", 100.0f * not_started_portion) + "%" );
        
        
        // Reset visibility:
        this.task_category_edit_separator.setVisible(false);
        this.task_category_edit_pane.setVisible(false);
        this.task_edit_separator.setVisible(false);
        this.task_edit_pane.setVisible(false);
        this.subtask_edit_separator.setVisible(false);
        this.subtask_edit_pane.setVisible(false);
        this.productivity_separator.setVisible(true);
        this.productivity_panel.setVisible(true);
        
        
        this.member_productivity_progress_panel.revalidate();
        this.team_productivity_progress_panel.revalidate();
        this.member_productivity_progress_panel.repaint();
        this.team_productivity_progress_panel.repaint();
    }
    
    
    public void refresh() {
        
        DefaultListModel[] lst_models = {
            (DefaultListModel) this.task_category_list.getModel(),
            (DefaultListModel) this.task_list.getModel(),
            (DefaultListModel) this.subtask_list.getModel(),
            (DefaultListModel) this.team_member_list.getModel()
        };
        
        this.header_team_label.setText(SystemController.current_team.team_ID() + " - Team Leader's Page");
        for (DefaultListModel model : lst_models)
            model.removeAllElements();
        
        if (this._focus == null) {  // if the user enters the page through the page navigation button
            this.__refresh_null_focus__(lst_models);
        } else {                    // if the user enters the page through an edit buttion in the Task Page
            for (java.awt.Component component: GeneralUIFunctions.getAllComponents(this.content_lists_body_pane))
                component.setEnabled(false);
            this.__refresh_non_null_focus__(lst_models);
        }     
        
        this.task_category_edit_message.setText("");
        this.task_edit_actions_message.setText("");
        this.subtask_edit_actions_message.setText("");
        
    }
    
    
    private void __refresh_null_focus__(DefaultListModel[] lst_models) {
        // @lst_models = { category_model, task_model, subtask_model, user_model }
        TreeSet<String> task_set = new TreeSet<>();
        TreeSet<String> subtask_set = new TreeSet<>();
        // List all content
        for (TaskCategory category: this._task_category_map.values()) {
            lst_models[0].addElement(category.name());
            for (Task task: category.tasks_in_category()) {
                if ( !task_set.add(task.name()) ) continue;
                // look for subtasks only when task is seen for the first time
                for (Subtask subtask: task.get_subtasks())
                    subtask_set.add(subtask.name());
            }
        }
        
        for (String task_name: task_set)
            lst_models[1].addElement(task_name);
        for (String subtask_name: subtask_set)
            lst_models[2].addElement(subtask_name);
        for (AppUser user: this._user_list)
            lst_models[3].addElement(AppUser.user_type_to_string(user.role()) + " - " + user.username());
            
        // Reset visibility:
        for (java.awt.Component component: GeneralUIFunctions.getAllComponents(this.content_lists_body_pane))
            component.setEnabled(true);
        this.hide_edit_panels();
    }
    
    private void __refresh_non_null_focus__(DefaultListModel[] lst_model) {
        // @lst_models = {category_model, task_model, subtask_model, user_model}
        if (this._focus == Focus.TASK_CATEGORY)
            this.__refresh_category_focus__(lst_model);
        else if (this._focus == Focus.TASK)
            this.__refresh_task_focus__(lst_model);
        else if (this._focus == Focus.SUBTASK)
            this.__refresh_subtask_focus__(lst_model);
        else
            System.out.println("ERROR: Leader's page focus parameter has been corrupted!");
    }
    
    private void __refresh_category_focus__(DefaultListModel[] lst_model) {
        // @lst_models = {category_model, task_model, subtask_model, user_model}
        TreeSet<String> subtask_set = new TreeSet<>();
        TreeSet<String> user_set = new TreeSet<>();
        // List content related to the focused task category:
        lst_model[0].addElement(this._focused_task_category.name());
        Task[] tasks = this._focused_task_category.tasks_in_category();
        for (Task task: tasks) {
            lst_model[1].addElement(task.name());
            for (Subtask subtask: task.get_subtasks()) {
                subtask_set.add(subtask.name());
                user_set.add(subtask.assigned_to_member_username());
            }
        }
        if (tasks.length != 0) user_set.add(tasks[0].assigned_to_member_username());
            
        for (String subtask_name: subtask_set)
            lst_model[2].addElement(subtask_name);
        for (String username: user_set)
            lst_model[3].addElement(username);
                
        // Reset visibility:
        this.fill_task_category_edit_panel();
    }
    
    private void __refresh_task_focus__(DefaultListModel[] lst_model) {
        // @lst_models = {category_model, task_model, subtask_model, user_model}
        TreeSet<String> user_set = new TreeSet<>();
        // List content related to the focused task:
        for (TaskCategory category: this._task_category_map.values()) {
            if ( category.find_task(this._focused_task.name()) )
                lst_model[0].addElement(category.name());   
        }
                
        lst_model[1].addElement(this._focused_task.name());
        for (Subtask subtask: this._focused_task.subtask_collection()) {
            lst_model[2].addElement(subtask.name());
            user_set.add(subtask.assigned_to_member_username());
        }
        user_set.add(this._focused_task.assigned_to_member_username());
                    
        for (String username: user_set)
            lst_model[3].addElement(username);
                
        // Reset visibility:
        this.fill_task_edit_panel();
    }
    
    private void __refresh_subtask_focus__(DefaultListModel[] lst_model) {
        // @lst_models = {category_model, task_model, subtask_model, user_model}
        // List content related to the focused subtask:
        for (TaskCategory category: this._task_category_map.values()) {
            if ( category.find_task(this._focused_subtask.parent_task().name()) )
                lst_model[0].addElement(category.name());   
        }
                
        lst_model[1].addElement(this._focused_subtask.parent_task().name());
        lst_model[2].addElement(this._focused_subtask.name());
        lst_model[3].addElement(this._focused_subtask.assigned_to_member_username());
                
        // Reset visibility:
        this.fill_subtask_edit_panel();
    }
    
    
    
    
    
    
    
    /*
        Function to redirect edit section to task category editing and show connections to other entities:
    */
    private void __category_list_selection_response__() {
        if (this.task_category_list.isSelectionEmpty()) return;  // stop if no category is selected
        ListSelectionModel category_model = this.task_category_list.getSelectionModel();
        ListSelectionModel task_model = this.task_list.getSelectionModel();
        ListSelectionModel subtask_model = this.subtask_list.getSelectionModel();
        ListSelectionModel user_model = this.team_member_list.getSelectionModel();
        
        if (this.__code_selection_mode__) {
            // Allow programmatic changes to use multiple selection mode:
            category_model.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        } else {
            // Restrict user selection ability to single selection:
            category_model.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            String category_name = this.task_category_list.getSelectedValue();
            this._focused_task_category = this._task_category_map.get(category_name);
            this._focused_task = null;
            this._focused_subtask = null;

            // Refactor related entity selections if the selection lists are active (page entered through the page navigation button):
            task_model.clearSelection();
            subtask_model.clearSelection();
            user_model.clearSelection();

            this.fill_task_category_edit_panel();
        }
    }
    
    /*
        Function to redirect edit section to task editing and show connections to other entities:
    */
    private void __task_list_selection_response__() {
        if (this.task_list.isSelectionEmpty()) return;  // stop if no task is selected
        ListSelectionModel category_model = this.task_category_list.getSelectionModel();
        ListSelectionModel task_model = this.task_list.getSelectionModel();
        ListSelectionModel subtask_model = this.subtask_list.getSelectionModel();
        ListSelectionModel user_model = this.team_member_list.getSelectionModel();
        TreeSet<String> category_set = new TreeSet<>();
        
        if (this.__code_selection_mode__) {
            // Allow programmatic changes to use multiple selection mode:
            task_model.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            // Obtain selected task names:
            java.util.List<String> tasks = this.task_list.getSelectedValuesList();
            
            // Collect category names to which the selected task names belong:
            for (TaskCategory category : this._task_category_map.values()) {
                for (String task_name : tasks) {
                    if (category.find_task(task_name)) {
                        category_set.add(category.name());
                        break;
                    }
                }
            }

        } else {
            // Restrict user selection ability to single selection:
            task_model.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            // Collect the category names to which the selected task belongs:
            String task_name = this.task_list.getSelectedValue();
            this._focused_task_category = null;
            this._focused_subtask = null;
            for (TaskCategory category : this._task_category_map.values()) {
                Task task = category.get_task(task_name);
                if (task != null) {
                    this._focused_task = task;
                    category_set.add(category.name());
                }
            }
            
            // Refactor related entity selections if the selection lists are active (page entered through the page navigation button):
            subtask_model.clearSelection();
            user_model.clearSelection();

            this.fill_task_edit_panel();
        }
        
        
        // Select the category names to which the selected task(s) belong:
        boolean code_selected = this.__code_selection_mode__;
        if (!code_selected) this.__code_selection_mode__ = true;
        
        category_model.clearSelection();
        ListModel category_list_model = this.task_category_list.getModel();
        Iterator<String> category_iter = category_set.iterator();
        String current_name = category_iter.next();
        int j = 0;
        int[] selected_indices = new int[category_set.size()];
        for (int i = 0; i < category_list_model.getSize(); ++i) {
            if (category_list_model.getElementAt(i).toString().equals(current_name)) {
                selected_indices[j++] = i;
                if (category_iter.hasNext()) current_name = category_iter.next();
                else break;
            }
        }
        this.task_category_list.setSelectedIndices(selected_indices);
        
        if (!code_selected) this.__code_selection_mode__ = false;
        
    }
    
    /*
        Function to redirect edit section to subtask editing and show connections to other entities:
    */
    private void __subtask_list_selection_response__() {
        
        if (this.subtask_list.isSelectionEmpty()) return;  // stop if no task is selected
        ListSelectionModel task_model = this.task_list.getSelectionModel();
        ListSelectionModel subtask_model = this.subtask_list.getSelectionModel();
        ListSelectionModel user_model = this.team_member_list.getSelectionModel();
        java.util.List<Task> task_list = new ArrayList<>();
        
        // Collect all tasks:
        for (TaskCategory category: this._task_category_map.values()) 
            task_list.addAll(category.task_collection());
        Collections.sort(task_list, new Comparator<Task>() { // sort the tasks
            @Override
            public int compare(Task t1, Task t2) {
                return t1.name().compareTo(t2.name());
            }
        });
        
        
        if (this.__code_selection_mode__) {
            // Allow programmatic changes to use multiple selection mode:
            subtask_model.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

            // Obtain selected task names:
            java.util.List<String> subtasks = this.subtask_list.getSelectedValuesList();
            
            // Filter out tasks that are not parent to the selected subtasks
            String last_task_name = null;
            Task current_task;
            for (Iterator<Task> task_iter=task_list.iterator(); task_iter.hasNext(); ) {
                current_task = task_iter.next();
                if (current_task.name().equals(last_task_name)) {
                    task_iter.remove(); continue;   // remove duplicate tasks
                }
                last_task_name = current_task.name();
                boolean task_is_parent = false;
                for (Iterator<String> subtask_iter=subtasks.iterator(); subtask_iter.hasNext(); ) {
                    if (current_task.get_subtask(subtask_iter.next()) != null) {
                        task_is_parent = true;
                        subtask_iter.remove();  // parent task found, remove subtask reference
                    }
                }
                if (!task_is_parent) task_iter.remove();  // remove task if not parent to selected subtasks
            }
            
        } else {
            // Restrict user selection ability to single selection:
            subtask_model.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            // Find the task that is parent to the selected subtask:
            String subtask_name = this.subtask_list.getSelectedValue();
            String last_task_name = null;
            Task current_task;
            this._focused_task_category = null;
            this._focused_subtask = null;
            this._focused_task = null;
            for (Iterator<Task> task_iter=task_list.iterator(); task_iter.hasNext(); ) {
                current_task = task_iter.next();
                if (current_task.name().equals(last_task_name) || this._focused_subtask != null) { 
                    task_iter.remove(); continue; // remove duplicate or redundant tasks
                }
                last_task_name = current_task.name();
                Subtask subtask = current_task.get_subtask(subtask_name);
                if (subtask == null) task_iter.remove(); // remove task if not parent to selected subtask
                else this._focused_subtask = subtask;
            }

            // Refactor related entity selections if the selection lists are active (page entered through the page navigation button):
            user_model.clearSelection();

            this.fill_subtask_edit_panel();
        }
        
        // Select the task names to which the selected subtask(s) are children:
        boolean code_selected = this.__code_selection_mode__;
        if (!code_selected) this.__code_selection_mode__ = true;
        
        task_model.clearSelection();
        ListModel task_list_model = this.task_list.getModel();
        Iterator<Task> task_iter = task_list.iterator();
        String current_name = task_iter.next().name();
        int j = 0;
        int[] selected_indices = new int[task_list.size()];
        for (int i = 0; i < task_list_model.getSize(); ++i) {
            if (task_list_model.getElementAt(i).toString().equals(current_name)) {
                selected_indices[j++] = i;
                if (task_iter.hasNext()) current_name = task_iter.next().name();
                else break;
            }
        }
        this.task_list.setSelectedIndices(selected_indices);
        
        if (!code_selected) this.__code_selection_mode__ = false;
        
    }
    
    /*
        Function to show connections of the selected user to other entities:
    */
    private void __user_list_selection_response__() {
        if (this.team_member_list.isSelectionEmpty()) return; // stop if no member is selected
        ListSelectionModel category_model = this.task_category_list.getSelectionModel();
        ListSelectionModel task_model = this.task_list.getSelectionModel();
        ListSelectionModel subtask_model = this.subtask_list.getSelectionModel();
        ListSelectionModel user_model = this.team_member_list.getSelectionModel();
        java.util.List<Subtask> subtask_list = new ArrayList<>();
        
        // Selection mode is user selection by default:
        subtask_model.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        String[] user_info = this.team_member_list.getSelectedValue().split(" - ");
        
        // Collect all subtasks:
        for (TaskCategory category: this._task_category_map.values()) {
            for (Task task: category.task_collection())
                subtask_list.addAll(task.subtask_collection());
        }
        Collections.sort(subtask_list, new Comparator<Subtask>() { // sort the tasks
            @Override
            public int compare(Subtask s1, Subtask s2) {
                return s1.name().compareTo(s2.name());
            }
        });
        
        // Filter out subtasks that are not assigned to the selected user:
        Subtask current_subtask;
        String last_subtask_name = null;
        for (Iterator<Subtask> subtask_iter=subtask_list.iterator(); subtask_iter.hasNext(); ) {
            current_subtask = subtask_iter.next();
            if (current_subtask.name().equals(last_subtask_name)) {
                subtask_iter.remove(); continue;
            }
            last_subtask_name = current_subtask.name();
            if (!current_subtask.assigned_to_member_username().equals(user_info[1]))
                subtask_iter.remove();
        }
        
        this._focused_task_category = null;
        this._focused_task = null;
        this._focused_subtask = null;
        this.fill_productivity_panel();
        
        // Select the subtask names which are assigned to the selected user:
        this.__code_selection_mode__ = true;
        
        subtask_model.clearSelection();
        if (subtask_list.isEmpty()) {   // no subtask is assigned to the selected user
            task_model.clearSelection();
            category_model.clearSelection();
        } else {
            ListModel subtask_list_model = this.subtask_list.getModel();
            Iterator<Subtask> subtask_iter = subtask_list.iterator();
            String current_name = subtask_iter.next().name();
            int j = 0;
            int[] selected_indices = new int[subtask_list.size()];
            for (int i = 0; i < subtask_list_model.getSize(); ++i) {
                if (subtask_list_model.getElementAt(i).toString().equals(current_name)) {
                    selected_indices[j++] = i;
                    if (subtask_iter.hasNext()) current_name = subtask_iter.next().name();
                    else break;
                }
            }
            this.subtask_list.setSelectedIndices(selected_indices);
        }
        
        this.__code_selection_mode__ = false;
        
    }
    
    /*
        Function to define the database interaction and UI behaviours when the 
        switch selections in the edit sections change:
    */
    public void __init_edit_switch_response__() {
        
        final TeamLeadersPage self = this;
        ListSelectionModel category_model = this.task_category_list.getSelectionModel();
        ListSelectionModel task_model = this.task_list.getSelectionModel();
        ListSelectionModel subtask_model = this.subtask_list.getSelectionModel();
        ListSelectionModel user_model = this.team_member_list.getSelectionModel();
        
        // Redirect edit section to task category editing and show connections to other entities:
        category_model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                self.__category_list_selection_response__();
            }
        });
        
        // Redirect edit section to task editing and show connections to other entities:
        task_model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                self.__task_list_selection_response__();
            }
        });
        
        // Redirect edit section to subtask editing and show connections to other entities:
        subtask_model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                self.__subtask_list_selection_response__();
            }
        });
        
        // Show connections of the selected user to other entities:
        user_model.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                self.__user_list_selection_response__();
            }
        });
        
        
        // Reflect colour of selected task priority when changed:
        this.task_edit_priority_options.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                short selected_index = (short) (self.task_edit_priority_options.getSelectedIndex() + 1);
                self.task_edit_priority_colour_pane.setBackground(TaskPrototype.color(selected_index));
            }
        });
        
        // Allow "adding to" or "removing from" category options to respond:
        this.task_edit_task_categories_action_options.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(ActionEvent e) {
                String selected_item = self.task_edit_task_categories_action_options.getSelectedItem().toString();
                self.task_edit_task_categories_options.removeAllItems();
                self.task_edit_task_categories_options.addItem("[select category]");
                
                if (selected_item.equals("Add to")) {
                    for (TaskCategory category: self._task_category_map.values()) {
                        if (!category.find_task(self._focused_task.name()))
                            self.task_edit_task_categories_options.addItem(category.name());
                    }
                } else if (selected_item.equals("Remove from")) {
                    for (TaskCategory category: self._task_category_map.values()) {
                        if (category.find_task(self._focused_task.name()))
                            self.task_edit_task_categories_options.addItem(category.name());
                    }
                }
            }
            
        });
        
        // Reflect colour of selected subtask priority when changed:
        this.subtask_edit_priority_options.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                short selected_index = (short) (self.subtask_edit_priority_options.getSelectedIndex() + 1);
                self.subtask_edit_priority_colour_pane.setBackground(TaskPrototype.color(selected_index));
            }
        });
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel content_lists_body_pane;
    private javax.swing.JPanel content_lists_title_pane;
    private javax.swing.JPanel edit_content_pane;
    private javax.swing.JSeparator header_buttons_seperator;
    private javax.swing.JPanel header_pane;
    private javax.swing.JLabel header_team_label;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton logout_button;
    private javax.swing.JPanel member_productivity_completed_colour;
    private javax.swing.JLabel member_productivity_completed_label;
    private javax.swing.JPanel member_productivity_completed_panel;
    private javax.swing.JLabel member_productivity_evaluation_label;
    private javax.swing.JLabel member_productivity_evaluation_value;
    private javax.swing.JPanel member_productivity_evalutaion_panel;
    private javax.swing.JPanel member_productivity_in_progress_colour;
    private javax.swing.JLabel member_productivity_in_progress_label;
    private javax.swing.JPanel member_productivity_in_progress_panel;
    private javax.swing.JPanel member_productivity_not_started_colour;
    private javax.swing.JLabel member_productivity_not_started_label;
    private javax.swing.JPanel member_productivity_not_started_panel;
    private javax.swing.JPanel member_productivity_panel;
    private javax.swing.JLabel member_productivity_progress_completed;
    private javax.swing.JLabel member_productivity_progress_in_progress;
    private javax.swing.JLabel member_productivity_progress_not_started;
    private javax.swing.JPanel member_productivity_progress_panel;
    private javax.swing.JLabel member_productivity_title_label;
    private javax.swing.JPanel member_productivity_title_panel;
    private javax.swing.JLabel member_productivity_username_label;
    private javax.swing.JPanel member_productivity_username_panel;
    private javax.swing.JLabel member_productivity_username_value;
    private javax.swing.JLabel member_productivity_workload_label;
    private javax.swing.JPanel member_productivity_workload_panel;
    private javax.swing.JLabel member_productivity_workload_value;
    private javax.swing.JPanel productivity_panel;
    private javax.swing.JSeparator productivity_separator;
    private javax.swing.JLabel subtask_edit_actions_message;
    private javax.swing.JPanel subtask_edit_actions_pane;
    private javax.swing.JLabel subtask_edit_assignment_label;
    private javax.swing.JComboBox<String> subtask_edit_assignment_options;
    private javax.swing.JButton subtask_edit_cancel_update_button;
    private javax.swing.JLabel subtask_edit_creation_date_label;
    private javax.swing.JPanel subtask_edit_creation_info_pane;
    private javax.swing.JLabel subtask_edit_creator_label;
    private javax.swing.JLabel subtask_edit_description_label;
    private javax.swing.JPanel subtask_edit_description_pane;
    private javax.swing.JTextArea subtask_edit_description_text;
    private javax.swing.JLabel subtask_edit_due_date_format_label;
    private javax.swing.JLabel subtask_edit_due_date_label;
    private javax.swing.JTextField subtask_edit_due_date_text;
    private javax.swing.JPanel subtask_edit_due_info_pane;
    private javax.swing.JLabel subtask_edit_name_label;
    private javax.swing.JPanel subtask_edit_name_pane;
    private javax.swing.JTextField subtask_edit_name_text;
    private javax.swing.JPanel subtask_edit_pane;
    private javax.swing.JLabel subtask_edit_parent_task_label;
    private javax.swing.JComboBox<String> subtask_edit_parent_task_options;
    private javax.swing.JPanel subtask_edit_parent_task_pane;
    private javax.swing.JPanel subtask_edit_priority_colour_pane;
    private javax.swing.JLabel subtask_edit_priority_label;
    private javax.swing.JComboBox<String> subtask_edit_priority_options;
    private javax.swing.JSeparator subtask_edit_separator;
    private javax.swing.JLabel subtask_edit_status_label;
    private javax.swing.JComboBox<String> subtask_edit_status_options;
    private javax.swing.JButton subtask_edit_update_button;
    private javax.swing.JList<String> subtask_list;
    private javax.swing.JLabel subtask_list_label;
    private javax.swing.JScrollPane subtask_list_scroll_pane;
    private javax.swing.JButton task_category_cancel_update_button;
    private javax.swing.JPanel task_category_edit_actions_pane;
    private javax.swing.JLabel task_category_edit_creation_date_label;
    private javax.swing.JPanel task_category_edit_creation_info_pane;
    private javax.swing.JLabel task_category_edit_creator_label;
    private javax.swing.JLabel task_category_edit_description_label;
    private javax.swing.JPanel task_category_edit_description_pane;
    private javax.swing.JTextArea task_category_edit_description_text;
    private javax.swing.JLabel task_category_edit_message;
    private javax.swing.JLabel task_category_edit_name_label;
    private javax.swing.JPanel task_category_edit_name_pane;
    private javax.swing.JTextField task_category_edit_name_text;
    private javax.swing.JPanel task_category_edit_pane;
    private javax.swing.JSeparator task_category_edit_separator;
    private javax.swing.JList<String> task_category_list;
    private javax.swing.JLabel task_category_list_label;
    private javax.swing.JScrollPane task_category_list_scroll_pane;
    private javax.swing.JButton task_category_update_button;
    private javax.swing.JLabel task_edit_actions_message;
    private javax.swing.JPanel task_edit_actions_pane;
    private javax.swing.JLabel task_edit_assignment_label;
    private javax.swing.JButton task_edit_cancel_update_button;
    private javax.swing.JLabel task_edit_creation_date_label;
    private javax.swing.JPanel task_edit_creation_info_pane;
    private javax.swing.JLabel task_edit_creator_label;
    private javax.swing.JLabel task_edit_description_label;
    private javax.swing.JPanel task_edit_description_pane;
    private javax.swing.JTextArea task_edit_description_text;
    private javax.swing.JLabel task_edit_due_date_format_label;
    private javax.swing.JLabel task_edit_due_date_label;
    private javax.swing.JTextField task_edit_due_date_text;
    private javax.swing.JPanel task_edit_due_info_pane;
    private javax.swing.JLabel task_edit_name_label;
    private javax.swing.JPanel task_edit_name_pane;
    private javax.swing.JTextField task_edit_name_text;
    private javax.swing.JPanel task_edit_pane;
    private javax.swing.JPanel task_edit_priority_colour_pane;
    private javax.swing.JLabel task_edit_priority_label;
    private javax.swing.JComboBox<String> task_edit_priority_options;
    private javax.swing.JComboBox<String> task_edit_recurrence_options;
    private javax.swing.JSeparator task_edit_separator;
    private javax.swing.JLabel task_edit_status_label;
    private javax.swing.JComboBox<String> task_edit_status_options;
    private javax.swing.JComboBox<String> task_edit_task_categories_action_options;
    private javax.swing.JLabel task_edit_task_categories_option_label;
    private javax.swing.JComboBox<String> task_edit_task_categories_options;
    private javax.swing.JPanel task_edit_task_categories_pane;
    private javax.swing.JButton task_edit_update_button;
    private javax.swing.JList<String> task_list;
    private javax.swing.JLabel task_list_label;
    private javax.swing.JScrollPane task_list_scroll_pane;
    private javax.swing.JPanel team_leaders_page_content_lists_pane;
    private javax.swing.JPanel team_leaders_page_header_buttons_pane;
    private javax.swing.JPanel team_leaders_page_team_content_pane;
    private javax.swing.JList<String> team_member_list;
    private javax.swing.JLabel team_member_list_label;
    private javax.swing.JScrollPane team_member_list_scroll_pane;
    private javax.swing.JPanel team_productivity_completed_colour;
    private javax.swing.JLabel team_productivity_completed_label;
    private javax.swing.JPanel team_productivity_completed_panel;
    private javax.swing.JLabel team_productivity_evaluation_label;
    private javax.swing.JLabel team_productivity_evaluation_value;
    private javax.swing.JPanel team_productivity_evalutaion_panel;
    private javax.swing.JPanel team_productivity_in_progress_colour;
    private javax.swing.JLabel team_productivity_in_progress_label;
    private javax.swing.JPanel team_productivity_in_progress_panel;
    private javax.swing.JLabel team_productivity_member_count_label;
    private javax.swing.JPanel team_productivity_member_count_panel;
    private javax.swing.JLabel team_productivity_member_count_value;
    private javax.swing.JPanel team_productivity_not_started_colour;
    private javax.swing.JLabel team_productivity_not_started_label;
    private javax.swing.JPanel team_productivity_not_started_panel;
    private javax.swing.JPanel team_productivity_panel;
    private javax.swing.JLabel team_productivity_progress_completed;
    private javax.swing.JLabel team_productivity_progress_in_progress;
    private javax.swing.JLabel team_productivity_progress_not_started;
    private javax.swing.JPanel team_productivity_progress_panel;
    private javax.swing.JLabel team_productivity_title_label;
    private javax.swing.JPanel team_productivity_title_panel;
    private javax.swing.JLabel team_productivity_workload_label;
    private javax.swing.JPanel team_productivity_workload_panel;
    private javax.swing.JLabel team_productivity_workload_value;
    private javax.swing.JButton to_task_page_button;
    // End of variables declaration//GEN-END:variables
}
